# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from etsi_msgs/BasicVehicleContainerHighFrequency.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import etsi_msgs.msg

class BasicVehicleContainerHighFrequency(genpy.Message):
  _md5sum = "62bb6a047d37b6cdb33896921037161d"
  _type = "etsi_msgs/BasicVehicleContainerHighFrequency"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Heading heading
Speed speed
DriveDirection drive_direction
VehicleLength vehicle_length
VehicleWidth vehicle_width
LongitudinalAcceleration longitudinal_acceleration
Curvature curvature
CurvatureCalculationMode curvature_calculation_mode
YawRate yaw_rate

# optional data fields
bool has_acceleration_control
AccelerationControl acceleration_control

# TODO further (optional) data fields are missing

================================================================================
MSG: etsi_msgs/Heading
uint16 value # 0.1 degree
uint8 confidence

uint16 VALUE_NORTH = 0
uint16 VALUE_EAST = 900
uint16 VALUE_SOUTH = 1800
uint16 VALUE_WEST = 2700
uint16 VALUE_UNAVAILABLE = 3601

uint8 CONFIDENCE_ZERO_POINT_ONE_DEGREE = 1
uint8 CONFIDENCE_ONE_DEGREE = 10
uint8 CONFIDENCE_OUT_OF_RANGE = 126
uint8 CONFIDENCE_UNAVAILABLE = 127

================================================================================
MSG: etsi_msgs/Speed
uint16 value # 0.01 m/s
uint8 confidence # 0.01 m/s

uint16 VALUE_STANDSTILL = 0
uint16 VALUE_ONE_CENTIMETER_PER_SECOND = 1
uint16 VALUE_UNAVAILABLE = 16383

uint8 CONFIDENCE_OUT_OF_RANGE = 126
uint8 CONFIDENCE_UNAVAILABLE = 127

================================================================================
MSG: etsi_msgs/DriveDirection
uint8 value

uint8 FORWARD = 0
uint8 BACKWARD = 1
uint8 UNAVAILABLE = 2

================================================================================
MSG: etsi_msgs/VehicleLength
uint16 value # 0.1 meter
uint8 confidence_indication

uint16 VALUE_TEN_CENTIMETERS = 1
uint16 VALUE_OUT_OF_RANGE = 1022
uint16 VALUE_UNAVAILABLE = 1023

uint8 CONFIDENCE_INDICATION_NO_TRAILER = 0
uint8 CONFIDENCE_INDICATION_TRAILER_WITH_KNOWN_LENGTH = 1
uint8 CONFIDENCE_INDICATION_TRAILER_WITH_UNKNOWN_LENGTH = 2
uint8 CONFIDENCE_INDICATION_UNKNOWN_TRAILER_PRESENCE = 3
uint8 CONFIDENCE_INDICATION_UNAVAILABLE = 4

================================================================================
MSG: etsi_msgs/VehicleWidth
uint8 value # 0.1 meter

uint8 TEN_CENTIMETERS = 1
uint8 OUT_OF_RANGE = 61
uint8 UNAVAILABLE = 62

================================================================================
MSG: etsi_msgs/LongitudinalAcceleration
int16 value # 0.1 m/s^2
uint8 confidence # 0.1 m/s^2

int16 VALUE_UNAVAILABLE = 161

uint8 CONFIDENCE_OUT_OF_RANGE = 101
uint8 CONFIDENCE_UNAVAILABLE = 102

================================================================================
MSG: etsi_msgs/Curvature
int16 value # m^-1
uint8 confidence

int16 VALUE_RIGHTMOST = -1023
int16 VALUE_LEFTMOST = 1022
int16 VALUE_MIN = -1023
int16 VALUE_MAX = 1022
int16 VALUE_STRAIGHT = 0
int16 VALUE_UNAVAILABLE = 1023

uint8 CONFIDENCE_OUT_OF_RANGE = 6
uint8 CONFIDENCE_UNAVAILABLE = 7

================================================================================
MSG: etsi_msgs/CurvatureCalculationMode
uint8 value

uint8 YAW_RATE_USED = 0
uint8 YAW_RATE_NOT_USED = 1
uint8 UNAVAILABLE = 2

================================================================================
MSG: etsi_msgs/YawRate
int16 value # 0.01 degree/s
uint8 confidence

int16 VALUE_UNAVAILABLE = 32767

uint8 CONFIDENCE_0DOT01_DEGSEC = 0
uint8 CONFIDENCE_0DOT05_DEGSEC = 1
uint8 CONFIDENCE_0DOT1_DEGSEC = 2
uint8 CONFIDENCE_1_DEGSEC = 3
uint8 CONFIDENCE_5_DEGSEC = 4
uint8 CONFIDENCE_10_DEGSEC = 5
uint8 CONFIDENCE_100_DEGSEC = 6
uint8 CONFIDENCE_OUT_OF_RANGE = 7
uint8 CONFIDENCE_UNAVAILABLE = 8

================================================================================
MSG: etsi_msgs/AccelerationControl
uint8 value

uint8 BRAKE_PEDAL_ENGAGED = 1
uint8 GAS_PEDAL_ENGAGED = 2
uint8 EMERGENCY_BRAKE_ENGAGED = 4
uint8 COLLISION_WARNING_ENGAGED = 8
uint8 ACC_ENGAGED = 16
uint8 CRUISE_CONTROL_ENGAGED = 32
uint8 SPEED_LIMITER_ENGAGED = 64
"""
  __slots__ = ['heading','speed','drive_direction','vehicle_length','vehicle_width','longitudinal_acceleration','curvature','curvature_calculation_mode','yaw_rate','has_acceleration_control','acceleration_control']
  _slot_types = ['etsi_msgs/Heading','etsi_msgs/Speed','etsi_msgs/DriveDirection','etsi_msgs/VehicleLength','etsi_msgs/VehicleWidth','etsi_msgs/LongitudinalAcceleration','etsi_msgs/Curvature','etsi_msgs/CurvatureCalculationMode','etsi_msgs/YawRate','bool','etsi_msgs/AccelerationControl']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       heading,speed,drive_direction,vehicle_length,vehicle_width,longitudinal_acceleration,curvature,curvature_calculation_mode,yaw_rate,has_acceleration_control,acceleration_control

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BasicVehicleContainerHighFrequency, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.heading is None:
        self.heading = etsi_msgs.msg.Heading()
      if self.speed is None:
        self.speed = etsi_msgs.msg.Speed()
      if self.drive_direction is None:
        self.drive_direction = etsi_msgs.msg.DriveDirection()
      if self.vehicle_length is None:
        self.vehicle_length = etsi_msgs.msg.VehicleLength()
      if self.vehicle_width is None:
        self.vehicle_width = etsi_msgs.msg.VehicleWidth()
      if self.longitudinal_acceleration is None:
        self.longitudinal_acceleration = etsi_msgs.msg.LongitudinalAcceleration()
      if self.curvature is None:
        self.curvature = etsi_msgs.msg.Curvature()
      if self.curvature_calculation_mode is None:
        self.curvature_calculation_mode = etsi_msgs.msg.CurvatureCalculationMode()
      if self.yaw_rate is None:
        self.yaw_rate = etsi_msgs.msg.YawRate()
      if self.has_acceleration_control is None:
        self.has_acceleration_control = False
      if self.acceleration_control is None:
        self.acceleration_control = etsi_msgs.msg.AccelerationControl()
    else:
      self.heading = etsi_msgs.msg.Heading()
      self.speed = etsi_msgs.msg.Speed()
      self.drive_direction = etsi_msgs.msg.DriveDirection()
      self.vehicle_length = etsi_msgs.msg.VehicleLength()
      self.vehicle_width = etsi_msgs.msg.VehicleWidth()
      self.longitudinal_acceleration = etsi_msgs.msg.LongitudinalAcceleration()
      self.curvature = etsi_msgs.msg.Curvature()
      self.curvature_calculation_mode = etsi_msgs.msg.CurvatureCalculationMode()
      self.yaw_rate = etsi_msgs.msg.YawRate()
      self.has_acceleration_control = False
      self.acceleration_control = etsi_msgs.msg.AccelerationControl()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_HBH2BH2BhBh2Bh3B().pack(_x.heading.value, _x.heading.confidence, _x.speed.value, _x.speed.confidence, _x.drive_direction.value, _x.vehicle_length.value, _x.vehicle_length.confidence_indication, _x.vehicle_width.value, _x.longitudinal_acceleration.value, _x.longitudinal_acceleration.confidence, _x.curvature.value, _x.curvature.confidence, _x.curvature_calculation_mode.value, _x.yaw_rate.value, _x.yaw_rate.confidence, _x.has_acceleration_control, _x.acceleration_control.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.heading is None:
        self.heading = etsi_msgs.msg.Heading()
      if self.speed is None:
        self.speed = etsi_msgs.msg.Speed()
      if self.drive_direction is None:
        self.drive_direction = etsi_msgs.msg.DriveDirection()
      if self.vehicle_length is None:
        self.vehicle_length = etsi_msgs.msg.VehicleLength()
      if self.vehicle_width is None:
        self.vehicle_width = etsi_msgs.msg.VehicleWidth()
      if self.longitudinal_acceleration is None:
        self.longitudinal_acceleration = etsi_msgs.msg.LongitudinalAcceleration()
      if self.curvature is None:
        self.curvature = etsi_msgs.msg.Curvature()
      if self.curvature_calculation_mode is None:
        self.curvature_calculation_mode = etsi_msgs.msg.CurvatureCalculationMode()
      if self.yaw_rate is None:
        self.yaw_rate = etsi_msgs.msg.YawRate()
      if self.acceleration_control is None:
        self.acceleration_control = etsi_msgs.msg.AccelerationControl()
      end = 0
      _x = self
      start = end
      end += 23
      (_x.heading.value, _x.heading.confidence, _x.speed.value, _x.speed.confidence, _x.drive_direction.value, _x.vehicle_length.value, _x.vehicle_length.confidence_indication, _x.vehicle_width.value, _x.longitudinal_acceleration.value, _x.longitudinal_acceleration.confidence, _x.curvature.value, _x.curvature.confidence, _x.curvature_calculation_mode.value, _x.yaw_rate.value, _x.yaw_rate.confidence, _x.has_acceleration_control, _x.acceleration_control.value,) = _get_struct_HBH2BH2BhBh2Bh3B().unpack(str[start:end])
      self.has_acceleration_control = bool(self.has_acceleration_control)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_HBH2BH2BhBh2Bh3B().pack(_x.heading.value, _x.heading.confidence, _x.speed.value, _x.speed.confidence, _x.drive_direction.value, _x.vehicle_length.value, _x.vehicle_length.confidence_indication, _x.vehicle_width.value, _x.longitudinal_acceleration.value, _x.longitudinal_acceleration.confidence, _x.curvature.value, _x.curvature.confidence, _x.curvature_calculation_mode.value, _x.yaw_rate.value, _x.yaw_rate.confidence, _x.has_acceleration_control, _x.acceleration_control.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.heading is None:
        self.heading = etsi_msgs.msg.Heading()
      if self.speed is None:
        self.speed = etsi_msgs.msg.Speed()
      if self.drive_direction is None:
        self.drive_direction = etsi_msgs.msg.DriveDirection()
      if self.vehicle_length is None:
        self.vehicle_length = etsi_msgs.msg.VehicleLength()
      if self.vehicle_width is None:
        self.vehicle_width = etsi_msgs.msg.VehicleWidth()
      if self.longitudinal_acceleration is None:
        self.longitudinal_acceleration = etsi_msgs.msg.LongitudinalAcceleration()
      if self.curvature is None:
        self.curvature = etsi_msgs.msg.Curvature()
      if self.curvature_calculation_mode is None:
        self.curvature_calculation_mode = etsi_msgs.msg.CurvatureCalculationMode()
      if self.yaw_rate is None:
        self.yaw_rate = etsi_msgs.msg.YawRate()
      if self.acceleration_control is None:
        self.acceleration_control = etsi_msgs.msg.AccelerationControl()
      end = 0
      _x = self
      start = end
      end += 23
      (_x.heading.value, _x.heading.confidence, _x.speed.value, _x.speed.confidence, _x.drive_direction.value, _x.vehicle_length.value, _x.vehicle_length.confidence_indication, _x.vehicle_width.value, _x.longitudinal_acceleration.value, _x.longitudinal_acceleration.confidence, _x.curvature.value, _x.curvature.confidence, _x.curvature_calculation_mode.value, _x.yaw_rate.value, _x.yaw_rate.confidence, _x.has_acceleration_control, _x.acceleration_control.value,) = _get_struct_HBH2BH2BhBh2Bh3B().unpack(str[start:end])
      self.has_acceleration_control = bool(self.has_acceleration_control)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_HBH2BH2BhBh2Bh3B = None
def _get_struct_HBH2BH2BhBh2Bh3B():
    global _struct_HBH2BH2BhBh2Bh3B
    if _struct_HBH2BH2BhBh2Bh3B is None:
        _struct_HBH2BH2BhBh2Bh3B = struct.Struct("<HBH2BH2BhBh2Bh3B")
    return _struct_HBH2BH2BhBh2Bh3B
