# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from etsi_msgs/SituationContainer.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import etsi_msgs.msg

class SituationContainer(genpy.Message):
  _md5sum = "d9a79cc76182211b632e0fb2d42e16d2"
  _type = "etsi_msgs/SituationContainer"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """InformationQuality information_quality
CauseCode event_type
bool has_linked_cause
CauseCode linked_cause
EventPoint[] event_history

================================================================================
MSG: etsi_msgs/InformationQuality
int8 value

int8 UNAVAILABLE = 0
int8 LOWEST = 1
int8 HIGHEST = 7

================================================================================
MSG: etsi_msgs/CauseCode
uint8 cause_code
uint8 sub_cause_code

uint8 RESERVED = 0
uint8 TRAFFIC_CONDITION = 1
uint8 ACCIDENT = 2
uint8 ROADWORKS = 3
uint8 ADVERSE_WEATHER_CONDITIONS_ADHESION = 4
uint8 HAZARDOUS_LOCATION_SURFACE_CONDITION = 9
uint8 HAZARDOUS_LOCATION_OBSTACLE_ON_THE_ROAD = 10
uint8 HAZARDOUS_LOCATION_ANIMAL_ON_THE_ROAD = 11
uint8 HUMAN_PRESENCE_ON_THE_ROAD = 12
uint8 WRONG_WAY_DRIVING = 14
uint8 RESCUE_AND_RECOVERY_WORK_IN_PROGRESS = 15
uint8 ADVERSE_WEATHER_CONDITIONS_EXTREME_WEATHER_CONDITION = 17
uint8 ADVERSE_WEATHER_CONDITIONS_VISIBILITY = 18
uint8 ADVERSE_WEATHER_CONDITIONS_PRECIPITATION = 19
uint8 SLOW_VEHICLE = 26
uint8 DANGEROUS_END_OF_QUEUE = 27
uint8 VEHICLE_BREAKDOWN = 91
uint8 POST_CRASH = 92
uint8 HUMAN_PROBLEM = 93
uint8 STATIONARY_VEHICLE = 94
uint8 EMERGENCY_VEHICLE_APPROACHING = 95
uint8 HAZARDOUS_LOCATION_DANGEROUS_CURVE = 96
uint8 COLLISION_RISK = 97
uint8 SIGNAL_VIOLATION = 98
uint8 DANGEROUS_SITUATION = 99

================================================================================
MSG: etsi_msgs/EventPoint
DeltaReferencePosition event_position
PathDeltaTime event_delta_time
InformationQuality information_quality

================================================================================
MSG: etsi_msgs/DeltaReferencePosition
int32 delta_latitude # 0.1 micro degree
int32 delta_longitude # 0.1 micro degree
int16 delta_altitude # centimeter

int32 ONE_MICRODEGREE_NORTH = 10
int32 ONE_MICRODEGREE_SOUTH = -10
int32 ONE_MICRODEGREE_EAST = 10
int32 ONE_MICRODEGREE_WEST = -10
int32 ONE_CENTIMETER_UP = 1
int32 ONE_CENTIMETER_DOWN = -1
int32 LATITUDE_UNAVAILABLE = 131072
int32 LONGITUDE_UNAVAILABLE = 131072
int16 ALTITUDE_UNAVAILABLE = 12800

================================================================================
MSG: etsi_msgs/PathDeltaTime
uint16 value # 10 ms

uint16 UNAVAILABLE = 0
uint16 TEN_MILLISECONDS_IN_PAST = 1
"""
  __slots__ = ['information_quality','event_type','has_linked_cause','linked_cause','event_history']
  _slot_types = ['etsi_msgs/InformationQuality','etsi_msgs/CauseCode','bool','etsi_msgs/CauseCode','etsi_msgs/EventPoint[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       information_quality,event_type,has_linked_cause,linked_cause,event_history

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SituationContainer, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.information_quality is None:
        self.information_quality = etsi_msgs.msg.InformationQuality()
      if self.event_type is None:
        self.event_type = etsi_msgs.msg.CauseCode()
      if self.has_linked_cause is None:
        self.has_linked_cause = False
      if self.linked_cause is None:
        self.linked_cause = etsi_msgs.msg.CauseCode()
      if self.event_history is None:
        self.event_history = []
    else:
      self.information_quality = etsi_msgs.msg.InformationQuality()
      self.event_type = etsi_msgs.msg.CauseCode()
      self.has_linked_cause = False
      self.linked_cause = etsi_msgs.msg.CauseCode()
      self.event_history = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_b5B().pack(_x.information_quality.value, _x.event_type.cause_code, _x.event_type.sub_cause_code, _x.has_linked_cause, _x.linked_cause.cause_code, _x.linked_cause.sub_cause_code))
      length = len(self.event_history)
      buff.write(_struct_I.pack(length))
      for val1 in self.event_history:
        _v1 = val1.event_position
        _x = _v1
        buff.write(_get_struct_2ih().pack(_x.delta_latitude, _x.delta_longitude, _x.delta_altitude))
        _v2 = val1.event_delta_time
        _x = _v2.value
        buff.write(_get_struct_H().pack(_x))
        _v3 = val1.information_quality
        _x = _v3.value
        buff.write(_get_struct_b().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.information_quality is None:
        self.information_quality = etsi_msgs.msg.InformationQuality()
      if self.event_type is None:
        self.event_type = etsi_msgs.msg.CauseCode()
      if self.linked_cause is None:
        self.linked_cause = etsi_msgs.msg.CauseCode()
      if self.event_history is None:
        self.event_history = None
      end = 0
      _x = self
      start = end
      end += 6
      (_x.information_quality.value, _x.event_type.cause_code, _x.event_type.sub_cause_code, _x.has_linked_cause, _x.linked_cause.cause_code, _x.linked_cause.sub_cause_code,) = _get_struct_b5B().unpack(str[start:end])
      self.has_linked_cause = bool(self.has_linked_cause)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.event_history = []
      for i in range(0, length):
        val1 = etsi_msgs.msg.EventPoint()
        _v4 = val1.event_position
        _x = _v4
        start = end
        end += 10
        (_x.delta_latitude, _x.delta_longitude, _x.delta_altitude,) = _get_struct_2ih().unpack(str[start:end])
        _v5 = val1.event_delta_time
        start = end
        end += 2
        (_v5.value,) = _get_struct_H().unpack(str[start:end])
        _v6 = val1.information_quality
        start = end
        end += 1
        (_v6.value,) = _get_struct_b().unpack(str[start:end])
        self.event_history.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_b5B().pack(_x.information_quality.value, _x.event_type.cause_code, _x.event_type.sub_cause_code, _x.has_linked_cause, _x.linked_cause.cause_code, _x.linked_cause.sub_cause_code))
      length = len(self.event_history)
      buff.write(_struct_I.pack(length))
      for val1 in self.event_history:
        _v7 = val1.event_position
        _x = _v7
        buff.write(_get_struct_2ih().pack(_x.delta_latitude, _x.delta_longitude, _x.delta_altitude))
        _v8 = val1.event_delta_time
        _x = _v8.value
        buff.write(_get_struct_H().pack(_x))
        _v9 = val1.information_quality
        _x = _v9.value
        buff.write(_get_struct_b().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.information_quality is None:
        self.information_quality = etsi_msgs.msg.InformationQuality()
      if self.event_type is None:
        self.event_type = etsi_msgs.msg.CauseCode()
      if self.linked_cause is None:
        self.linked_cause = etsi_msgs.msg.CauseCode()
      if self.event_history is None:
        self.event_history = None
      end = 0
      _x = self
      start = end
      end += 6
      (_x.information_quality.value, _x.event_type.cause_code, _x.event_type.sub_cause_code, _x.has_linked_cause, _x.linked_cause.cause_code, _x.linked_cause.sub_cause_code,) = _get_struct_b5B().unpack(str[start:end])
      self.has_linked_cause = bool(self.has_linked_cause)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.event_history = []
      for i in range(0, length):
        val1 = etsi_msgs.msg.EventPoint()
        _v10 = val1.event_position
        _x = _v10
        start = end
        end += 10
        (_x.delta_latitude, _x.delta_longitude, _x.delta_altitude,) = _get_struct_2ih().unpack(str[start:end])
        _v11 = val1.event_delta_time
        start = end
        end += 2
        (_v11.value,) = _get_struct_H().unpack(str[start:end])
        _v12 = val1.information_quality
        start = end
        end += 1
        (_v12.value,) = _get_struct_b().unpack(str[start:end])
        self.event_history.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2ih = None
def _get_struct_2ih():
    global _struct_2ih
    if _struct_2ih is None:
        _struct_2ih = struct.Struct("<2ih")
    return _struct_2ih
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_b5B = None
def _get_struct_b5B():
    global _struct_b5B
    if _struct_b5B is None:
        _struct_b5B = struct.Struct("<b5B")
    return _struct_b5B
