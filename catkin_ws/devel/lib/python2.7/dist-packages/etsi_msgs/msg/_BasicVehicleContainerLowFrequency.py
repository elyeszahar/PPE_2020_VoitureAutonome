# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from etsi_msgs/BasicVehicleContainerLowFrequency.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import etsi_msgs.msg

class BasicVehicleContainerLowFrequency(genpy.Message):
  _md5sum = "5482aab88df6146441146840b8322331"
  _type = "etsi_msgs/BasicVehicleContainerLowFrequency"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """VehicleRole vehicle_role
ExteriorLights exterior_lights
PathHistory path_history

================================================================================
MSG: etsi_msgs/VehicleRole
uint8 value

uint8 DEFAULT = 0
uint8 PUBLIC_TRANSPORT = 1
uint8 SPECIAL_TRANSPORT = 2
uint8 DANGEROUS_GOODS = 3
uint8 ROAD_WORK = 4
uint8 RESCUE = 5
uint8 EMERGENCY = 6
uint8 SAFETY_CAR = 7
uint8 AGRICULTURE = 8
uint8 COMMERCIAL = 9
uint8 MILITARY = 10
uint8 ROAD_OPERATOR = 11
uint8 TAXI = 12

================================================================================
MSG: etsi_msgs/ExteriorLights
uint8 value

uint8 LOW_BEAM_HEADLIGHTS = 1
uint8 HIGH_BEAM_HEADLIGHTS = 2
uint8 LEFT_TURN_SIGNAL = 4
uint8 RIGHT_TURN_SIGNAL = 8
uint8 DAYTIME_RUNNING_LIGHTS = 16
uint8 REVERSE_LIGHT = 32
uint8 FOG_LIGHT = 64
uint8 PARKING_LIGHTS = 128

================================================================================
MSG: etsi_msgs/PathHistory
PathPoint[] points

================================================================================
MSG: etsi_msgs/PathPoint
DeltaReferencePosition path_position
PathDeltaTime path_delta_time

================================================================================
MSG: etsi_msgs/DeltaReferencePosition
int32 delta_latitude # 0.1 micro degree
int32 delta_longitude # 0.1 micro degree
int16 delta_altitude # centimeter

int32 ONE_MICRODEGREE_NORTH = 10
int32 ONE_MICRODEGREE_SOUTH = -10
int32 ONE_MICRODEGREE_EAST = 10
int32 ONE_MICRODEGREE_WEST = -10
int32 ONE_CENTIMETER_UP = 1
int32 ONE_CENTIMETER_DOWN = -1
int32 LATITUDE_UNAVAILABLE = 131072
int32 LONGITUDE_UNAVAILABLE = 131072
int16 ALTITUDE_UNAVAILABLE = 12800

================================================================================
MSG: etsi_msgs/PathDeltaTime
uint16 value # 10 ms

uint16 UNAVAILABLE = 0
uint16 TEN_MILLISECONDS_IN_PAST = 1
"""
  __slots__ = ['vehicle_role','exterior_lights','path_history']
  _slot_types = ['etsi_msgs/VehicleRole','etsi_msgs/ExteriorLights','etsi_msgs/PathHistory']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vehicle_role,exterior_lights,path_history

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BasicVehicleContainerLowFrequency, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vehicle_role is None:
        self.vehicle_role = etsi_msgs.msg.VehicleRole()
      if self.exterior_lights is None:
        self.exterior_lights = etsi_msgs.msg.ExteriorLights()
      if self.path_history is None:
        self.path_history = etsi_msgs.msg.PathHistory()
    else:
      self.vehicle_role = etsi_msgs.msg.VehicleRole()
      self.exterior_lights = etsi_msgs.msg.ExteriorLights()
      self.path_history = etsi_msgs.msg.PathHistory()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.vehicle_role.value, _x.exterior_lights.value))
      length = len(self.path_history.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_history.points:
        _v1 = val1.path_position
        _x = _v1
        buff.write(_get_struct_2ih().pack(_x.delta_latitude, _x.delta_longitude, _x.delta_altitude))
        _v2 = val1.path_delta_time
        _x = _v2.value
        buff.write(_get_struct_H().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vehicle_role is None:
        self.vehicle_role = etsi_msgs.msg.VehicleRole()
      if self.exterior_lights is None:
        self.exterior_lights = etsi_msgs.msg.ExteriorLights()
      if self.path_history is None:
        self.path_history = etsi_msgs.msg.PathHistory()
      end = 0
      _x = self
      start = end
      end += 2
      (_x.vehicle_role.value, _x.exterior_lights.value,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_history.points = []
      for i in range(0, length):
        val1 = etsi_msgs.msg.PathPoint()
        _v3 = val1.path_position
        _x = _v3
        start = end
        end += 10
        (_x.delta_latitude, _x.delta_longitude, _x.delta_altitude,) = _get_struct_2ih().unpack(str[start:end])
        _v4 = val1.path_delta_time
        start = end
        end += 2
        (_v4.value,) = _get_struct_H().unpack(str[start:end])
        self.path_history.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.vehicle_role.value, _x.exterior_lights.value))
      length = len(self.path_history.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_history.points:
        _v5 = val1.path_position
        _x = _v5
        buff.write(_get_struct_2ih().pack(_x.delta_latitude, _x.delta_longitude, _x.delta_altitude))
        _v6 = val1.path_delta_time
        _x = _v6.value
        buff.write(_get_struct_H().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vehicle_role is None:
        self.vehicle_role = etsi_msgs.msg.VehicleRole()
      if self.exterior_lights is None:
        self.exterior_lights = etsi_msgs.msg.ExteriorLights()
      if self.path_history is None:
        self.path_history = etsi_msgs.msg.PathHistory()
      end = 0
      _x = self
      start = end
      end += 2
      (_x.vehicle_role.value, _x.exterior_lights.value,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_history.points = []
      for i in range(0, length):
        val1 = etsi_msgs.msg.PathPoint()
        _v7 = val1.path_position
        _x = _v7
        start = end
        end += 10
        (_x.delta_latitude, _x.delta_longitude, _x.delta_altitude,) = _get_struct_2ih().unpack(str[start:end])
        _v8 = val1.path_delta_time
        start = end
        end += 2
        (_v8.value,) = _get_struct_H().unpack(str[start:end])
        self.path_history.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2ih = None
def _get_struct_2ih():
    global _struct_2ih
    if _struct_2ih is None:
        _struct_2ih = struct.Struct("<2ih")
    return _struct_2ih
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
