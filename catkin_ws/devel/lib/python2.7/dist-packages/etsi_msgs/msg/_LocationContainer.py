# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from etsi_msgs/LocationContainer.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import etsi_msgs.msg

class LocationContainer(genpy.Message):
  _md5sum = "a09dcf7fff0ab0b3181252f05813385c"
  _type = "etsi_msgs/LocationContainer"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Speed event_speed
Heading event_position_heading
PathHistory[] traces
uint8 road_type

uint8 ROAD_TYPE_URBAN_NO_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 0
uint8 ROAD_TYPE_URBAN_WITH_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 1
uint8 ROAD_TYPE_NON_URBAN_NO_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 2
uint8 ROAD_TYPE_NON_URBAN_WITH_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 3
uint8 ROAD_TYPE_UNAVAILABLE = 255

================================================================================
MSG: etsi_msgs/Speed
uint16 value # 0.01 m/s
uint8 confidence # 0.01 m/s

uint16 VALUE_STANDSTILL = 0
uint16 VALUE_ONE_CENTIMETER_PER_SECOND = 1
uint16 VALUE_UNAVAILABLE = 16383

uint8 CONFIDENCE_OUT_OF_RANGE = 126
uint8 CONFIDENCE_UNAVAILABLE = 127

================================================================================
MSG: etsi_msgs/Heading
uint16 value # 0.1 degree
uint8 confidence

uint16 VALUE_NORTH = 0
uint16 VALUE_EAST = 900
uint16 VALUE_SOUTH = 1800
uint16 VALUE_WEST = 2700
uint16 VALUE_UNAVAILABLE = 3601

uint8 CONFIDENCE_ZERO_POINT_ONE_DEGREE = 1
uint8 CONFIDENCE_ONE_DEGREE = 10
uint8 CONFIDENCE_OUT_OF_RANGE = 126
uint8 CONFIDENCE_UNAVAILABLE = 127

================================================================================
MSG: etsi_msgs/PathHistory
PathPoint[] points

================================================================================
MSG: etsi_msgs/PathPoint
DeltaReferencePosition path_position
PathDeltaTime path_delta_time

================================================================================
MSG: etsi_msgs/DeltaReferencePosition
int32 delta_latitude # 0.1 micro degree
int32 delta_longitude # 0.1 micro degree
int16 delta_altitude # centimeter

int32 ONE_MICRODEGREE_NORTH = 10
int32 ONE_MICRODEGREE_SOUTH = -10
int32 ONE_MICRODEGREE_EAST = 10
int32 ONE_MICRODEGREE_WEST = -10
int32 ONE_CENTIMETER_UP = 1
int32 ONE_CENTIMETER_DOWN = -1
int32 LATITUDE_UNAVAILABLE = 131072
int32 LONGITUDE_UNAVAILABLE = 131072
int16 ALTITUDE_UNAVAILABLE = 12800

================================================================================
MSG: etsi_msgs/PathDeltaTime
uint16 value # 10 ms

uint16 UNAVAILABLE = 0
uint16 TEN_MILLISECONDS_IN_PAST = 1
"""
  # Pseudo-constants
  ROAD_TYPE_URBAN_NO_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 0
  ROAD_TYPE_URBAN_WITH_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 1
  ROAD_TYPE_NON_URBAN_NO_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 2
  ROAD_TYPE_NON_URBAN_WITH_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 3
  ROAD_TYPE_UNAVAILABLE = 255

  __slots__ = ['event_speed','event_position_heading','traces','road_type']
  _slot_types = ['etsi_msgs/Speed','etsi_msgs/Heading','etsi_msgs/PathHistory[]','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       event_speed,event_position_heading,traces,road_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LocationContainer, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.event_speed is None:
        self.event_speed = etsi_msgs.msg.Speed()
      if self.event_position_heading is None:
        self.event_position_heading = etsi_msgs.msg.Heading()
      if self.traces is None:
        self.traces = []
      if self.road_type is None:
        self.road_type = 0
    else:
      self.event_speed = etsi_msgs.msg.Speed()
      self.event_position_heading = etsi_msgs.msg.Heading()
      self.traces = []
      self.road_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_HBHB().pack(_x.event_speed.value, _x.event_speed.confidence, _x.event_position_heading.value, _x.event_position_heading.confidence))
      length = len(self.traces)
      buff.write(_struct_I.pack(length))
      for val1 in self.traces:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _v1 = val2.path_position
          _x = _v1
          buff.write(_get_struct_2ih().pack(_x.delta_latitude, _x.delta_longitude, _x.delta_altitude))
          _v2 = val2.path_delta_time
          _x = _v2.value
          buff.write(_get_struct_H().pack(_x))
      _x = self.road_type
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.event_speed is None:
        self.event_speed = etsi_msgs.msg.Speed()
      if self.event_position_heading is None:
        self.event_position_heading = etsi_msgs.msg.Heading()
      if self.traces is None:
        self.traces = None
      end = 0
      _x = self
      start = end
      end += 6
      (_x.event_speed.value, _x.event_speed.confidence, _x.event_position_heading.value, _x.event_position_heading.confidence,) = _get_struct_HBHB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traces = []
      for i in range(0, length):
        val1 = etsi_msgs.msg.PathHistory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = etsi_msgs.msg.PathPoint()
          _v3 = val2.path_position
          _x = _v3
          start = end
          end += 10
          (_x.delta_latitude, _x.delta_longitude, _x.delta_altitude,) = _get_struct_2ih().unpack(str[start:end])
          _v4 = val2.path_delta_time
          start = end
          end += 2
          (_v4.value,) = _get_struct_H().unpack(str[start:end])
          val1.points.append(val2)
        self.traces.append(val1)
      start = end
      end += 1
      (self.road_type,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_HBHB().pack(_x.event_speed.value, _x.event_speed.confidence, _x.event_position_heading.value, _x.event_position_heading.confidence))
      length = len(self.traces)
      buff.write(_struct_I.pack(length))
      for val1 in self.traces:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _v5 = val2.path_position
          _x = _v5
          buff.write(_get_struct_2ih().pack(_x.delta_latitude, _x.delta_longitude, _x.delta_altitude))
          _v6 = val2.path_delta_time
          _x = _v6.value
          buff.write(_get_struct_H().pack(_x))
      _x = self.road_type
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.event_speed is None:
        self.event_speed = etsi_msgs.msg.Speed()
      if self.event_position_heading is None:
        self.event_position_heading = etsi_msgs.msg.Heading()
      if self.traces is None:
        self.traces = None
      end = 0
      _x = self
      start = end
      end += 6
      (_x.event_speed.value, _x.event_speed.confidence, _x.event_position_heading.value, _x.event_position_heading.confidence,) = _get_struct_HBHB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.traces = []
      for i in range(0, length):
        val1 = etsi_msgs.msg.PathHistory()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = etsi_msgs.msg.PathPoint()
          _v7 = val2.path_position
          _x = _v7
          start = end
          end += 10
          (_x.delta_latitude, _x.delta_longitude, _x.delta_altitude,) = _get_struct_2ih().unpack(str[start:end])
          _v8 = val2.path_delta_time
          start = end
          end += 2
          (_v8.value,) = _get_struct_H().unpack(str[start:end])
          val1.points.append(val2)
        self.traces.append(val1)
      start = end
      end += 1
      (self.road_type,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2ih = None
def _get_struct_2ih():
    global _struct_2ih
    if _struct_2ih is None:
        _struct_2ih = struct.Struct("<2ih")
    return _struct_2ih
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_HBHB = None
def _get_struct_HBHB():
    global _struct_HBHB
    if _struct_HBHB is None:
        _struct_HBHB = struct.Struct("<HBHB")
    return _struct_HBHB
