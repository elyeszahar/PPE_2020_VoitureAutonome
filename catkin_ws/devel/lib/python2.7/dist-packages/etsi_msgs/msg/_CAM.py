# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from etsi_msgs/CAM.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import etsi_msgs.msg
import std_msgs.msg

class CAM(genpy.Message):
  _md5sum = "9c2e1d050ad79cf1fc0a55266577e7c4"
  _type = "etsi_msgs/CAM"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
ItsPduHeader its_header
uint16 generation_delta_time # milliseconds since 2004 modulo 2^16

# basic container
StationType station_type
ReferencePosition reference_position

# TODO either BasicVehicle or RSU
BasicVehicleContainerHighFrequency high_frequency_container

bool has_low_frequency_container
BasicVehicleContainerLowFrequency low_frequency_container

# TODO special vehicle container is missing

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: etsi_msgs/ItsPduHeader
uint8 protocol_version
uint8 message_id
uint32 station_id

uint8 MESSAGE_ID_DENM = 1
uint8 MESSAGE_ID_CAM = 2

================================================================================
MSG: etsi_msgs/StationType
uint8 value

uint8 UNKNOWN = 0
uint8 PEDESTRIAN = 1
uint8 CYCLIST = 2
uint8 MOPED = 3
uint8 MOTORCYCLE = 4
uint8 PASSENGER_CAR = 5
uint8 BUS = 6
uint8 LIGHT_TRUCK = 7
uint8 HEAVY_TRUCK = 8
uint8 TRAILER = 9
uint8 SPECIAL_VEHICLE = 10
uint8 TRAM = 11
uint8 ROAD_SIDE_UNIT = 15

================================================================================
MSG: etsi_msgs/ReferencePosition
int64 latitude # 0.1 micro degree
int64 longitude # 0.1 micro degree
PositionConfidenceEllipse position_confidence
Altitude altitude

int64 LATITUDE_UNAVAILABLE = 900000001
int64 LONGITUDE_UNAVAILABLE = 1800000001

================================================================================
MSG: etsi_msgs/PositionConfidenceEllipse
uint16 semi_major_confidence # cm
uint16 semi_minor_confidence # cm
uint16 semi_major_orientation # 0.1 degree

uint16 SEMI_AXIS_LENGTH_OUT_OF_RANGE = 4094
uint16 SEMI_AXIS_LENGTH_UNAVAILABLE = 4095

================================================================================
MSG: etsi_msgs/Altitude
int32 value # 0.01 meter
uint8 confidence

int32 VALUE_REFERENCE_ELLIPSOID_SURFACE = 0
int32 VALUE_ONE_CENTIMETER = 1
int32 VALUE_UNAVAILABLE = 800001

uint8 CONFIDENCE_1CM = 0
uint8 CONFIDENCE_2CM = 1
uint8 CONFIDENCE_5CM = 2
uint8 CONFIDENCE_10CM = 3
uint8 CONFIDENCE_20CM = 4
uint8 CONFIDENCE_50CM = 5
uint8 CONFIDENCE_1M = 6
uint8 CONFIDENCE_2M = 7
uint8 CONFIDENCE_5M = 8
uint8 CONFIDENCE_10M = 9
uint8 CONFIDENCE_20M = 10
uint8 CONFIDENCE_50M = 11
uint8 CONFIDENCE_100M = 12
uint8 CONFIDENCE_200M = 13
uint8 CONFIDENCE_OUT_OF_RANGE = 14
uint8 CONFIDENCE_UNAVAILABLE = 15

================================================================================
MSG: etsi_msgs/BasicVehicleContainerHighFrequency
Heading heading
Speed speed
DriveDirection drive_direction
VehicleLength vehicle_length
VehicleWidth vehicle_width
LongitudinalAcceleration longitudinal_acceleration
Curvature curvature
CurvatureCalculationMode curvature_calculation_mode
YawRate yaw_rate

# optional data fields
bool has_acceleration_control
AccelerationControl acceleration_control

# TODO further (optional) data fields are missing

================================================================================
MSG: etsi_msgs/Heading
uint16 value # 0.1 degree
uint8 confidence

uint16 VALUE_NORTH = 0
uint16 VALUE_EAST = 900
uint16 VALUE_SOUTH = 1800
uint16 VALUE_WEST = 2700
uint16 VALUE_UNAVAILABLE = 3601

uint8 CONFIDENCE_ZERO_POINT_ONE_DEGREE = 1
uint8 CONFIDENCE_ONE_DEGREE = 10
uint8 CONFIDENCE_OUT_OF_RANGE = 126
uint8 CONFIDENCE_UNAVAILABLE = 127

================================================================================
MSG: etsi_msgs/Speed
uint16 value # 0.01 m/s
uint8 confidence # 0.01 m/s

uint16 VALUE_STANDSTILL = 0
uint16 VALUE_ONE_CENTIMETER_PER_SECOND = 1
uint16 VALUE_UNAVAILABLE = 16383

uint8 CONFIDENCE_OUT_OF_RANGE = 126
uint8 CONFIDENCE_UNAVAILABLE = 127

================================================================================
MSG: etsi_msgs/DriveDirection
uint8 value

uint8 FORWARD = 0
uint8 BACKWARD = 1
uint8 UNAVAILABLE = 2

================================================================================
MSG: etsi_msgs/VehicleLength
uint16 value # 0.1 meter
uint8 confidence_indication

uint16 VALUE_TEN_CENTIMETERS = 1
uint16 VALUE_OUT_OF_RANGE = 1022
uint16 VALUE_UNAVAILABLE = 1023

uint8 CONFIDENCE_INDICATION_NO_TRAILER = 0
uint8 CONFIDENCE_INDICATION_TRAILER_WITH_KNOWN_LENGTH = 1
uint8 CONFIDENCE_INDICATION_TRAILER_WITH_UNKNOWN_LENGTH = 2
uint8 CONFIDENCE_INDICATION_UNKNOWN_TRAILER_PRESENCE = 3
uint8 CONFIDENCE_INDICATION_UNAVAILABLE = 4

================================================================================
MSG: etsi_msgs/VehicleWidth
uint8 value # 0.1 meter

uint8 TEN_CENTIMETERS = 1
uint8 OUT_OF_RANGE = 61
uint8 UNAVAILABLE = 62

================================================================================
MSG: etsi_msgs/LongitudinalAcceleration
int16 value # 0.1 m/s^2
uint8 confidence # 0.1 m/s^2

int16 VALUE_UNAVAILABLE = 161

uint8 CONFIDENCE_OUT_OF_RANGE = 101
uint8 CONFIDENCE_UNAVAILABLE = 102

================================================================================
MSG: etsi_msgs/Curvature
int16 value # m^-1
uint8 confidence

int16 VALUE_RIGHTMOST = -1023
int16 VALUE_LEFTMOST = 1022
int16 VALUE_MIN = -1023
int16 VALUE_MAX = 1022
int16 VALUE_STRAIGHT = 0
int16 VALUE_UNAVAILABLE = 1023

uint8 CONFIDENCE_OUT_OF_RANGE = 6
uint8 CONFIDENCE_UNAVAILABLE = 7

================================================================================
MSG: etsi_msgs/CurvatureCalculationMode
uint8 value

uint8 YAW_RATE_USED = 0
uint8 YAW_RATE_NOT_USED = 1
uint8 UNAVAILABLE = 2

================================================================================
MSG: etsi_msgs/YawRate
int16 value # 0.01 degree/s
uint8 confidence

int16 VALUE_UNAVAILABLE = 32767

uint8 CONFIDENCE_0DOT01_DEGSEC = 0
uint8 CONFIDENCE_0DOT05_DEGSEC = 1
uint8 CONFIDENCE_0DOT1_DEGSEC = 2
uint8 CONFIDENCE_1_DEGSEC = 3
uint8 CONFIDENCE_5_DEGSEC = 4
uint8 CONFIDENCE_10_DEGSEC = 5
uint8 CONFIDENCE_100_DEGSEC = 6
uint8 CONFIDENCE_OUT_OF_RANGE = 7
uint8 CONFIDENCE_UNAVAILABLE = 8

================================================================================
MSG: etsi_msgs/AccelerationControl
uint8 value

uint8 BRAKE_PEDAL_ENGAGED = 1
uint8 GAS_PEDAL_ENGAGED = 2
uint8 EMERGENCY_BRAKE_ENGAGED = 4
uint8 COLLISION_WARNING_ENGAGED = 8
uint8 ACC_ENGAGED = 16
uint8 CRUISE_CONTROL_ENGAGED = 32
uint8 SPEED_LIMITER_ENGAGED = 64

================================================================================
MSG: etsi_msgs/BasicVehicleContainerLowFrequency
VehicleRole vehicle_role
ExteriorLights exterior_lights
PathHistory path_history

================================================================================
MSG: etsi_msgs/VehicleRole
uint8 value

uint8 DEFAULT = 0
uint8 PUBLIC_TRANSPORT = 1
uint8 SPECIAL_TRANSPORT = 2
uint8 DANGEROUS_GOODS = 3
uint8 ROAD_WORK = 4
uint8 RESCUE = 5
uint8 EMERGENCY = 6
uint8 SAFETY_CAR = 7
uint8 AGRICULTURE = 8
uint8 COMMERCIAL = 9
uint8 MILITARY = 10
uint8 ROAD_OPERATOR = 11
uint8 TAXI = 12

================================================================================
MSG: etsi_msgs/ExteriorLights
uint8 value

uint8 LOW_BEAM_HEADLIGHTS = 1
uint8 HIGH_BEAM_HEADLIGHTS = 2
uint8 LEFT_TURN_SIGNAL = 4
uint8 RIGHT_TURN_SIGNAL = 8
uint8 DAYTIME_RUNNING_LIGHTS = 16
uint8 REVERSE_LIGHT = 32
uint8 FOG_LIGHT = 64
uint8 PARKING_LIGHTS = 128

================================================================================
MSG: etsi_msgs/PathHistory
PathPoint[] points

================================================================================
MSG: etsi_msgs/PathPoint
DeltaReferencePosition path_position
PathDeltaTime path_delta_time

================================================================================
MSG: etsi_msgs/DeltaReferencePosition
int32 delta_latitude # 0.1 micro degree
int32 delta_longitude # 0.1 micro degree
int16 delta_altitude # centimeter

int32 ONE_MICRODEGREE_NORTH = 10
int32 ONE_MICRODEGREE_SOUTH = -10
int32 ONE_MICRODEGREE_EAST = 10
int32 ONE_MICRODEGREE_WEST = -10
int32 ONE_CENTIMETER_UP = 1
int32 ONE_CENTIMETER_DOWN = -1
int32 LATITUDE_UNAVAILABLE = 131072
int32 LONGITUDE_UNAVAILABLE = 131072
int16 ALTITUDE_UNAVAILABLE = 12800

================================================================================
MSG: etsi_msgs/PathDeltaTime
uint16 value # 10 ms

uint16 UNAVAILABLE = 0
uint16 TEN_MILLISECONDS_IN_PAST = 1
"""
  __slots__ = ['header','its_header','generation_delta_time','station_type','reference_position','high_frequency_container','has_low_frequency_container','low_frequency_container']
  _slot_types = ['std_msgs/Header','etsi_msgs/ItsPduHeader','uint16','etsi_msgs/StationType','etsi_msgs/ReferencePosition','etsi_msgs/BasicVehicleContainerHighFrequency','bool','etsi_msgs/BasicVehicleContainerLowFrequency']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,its_header,generation_delta_time,station_type,reference_position,high_frequency_container,has_low_frequency_container,low_frequency_container

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CAM, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.its_header is None:
        self.its_header = etsi_msgs.msg.ItsPduHeader()
      if self.generation_delta_time is None:
        self.generation_delta_time = 0
      if self.station_type is None:
        self.station_type = etsi_msgs.msg.StationType()
      if self.reference_position is None:
        self.reference_position = etsi_msgs.msg.ReferencePosition()
      if self.high_frequency_container is None:
        self.high_frequency_container = etsi_msgs.msg.BasicVehicleContainerHighFrequency()
      if self.has_low_frequency_container is None:
        self.has_low_frequency_container = False
      if self.low_frequency_container is None:
        self.low_frequency_container = etsi_msgs.msg.BasicVehicleContainerLowFrequency()
    else:
      self.header = std_msgs.msg.Header()
      self.its_header = etsi_msgs.msg.ItsPduHeader()
      self.generation_delta_time = 0
      self.station_type = etsi_msgs.msg.StationType()
      self.reference_position = etsi_msgs.msg.ReferencePosition()
      self.high_frequency_container = etsi_msgs.msg.BasicVehicleContainerHighFrequency()
      self.has_low_frequency_container = False
      self.low_frequency_container = etsi_msgs.msg.BasicVehicleContainerLowFrequency()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2BIHB2q3HiBHBH2BH2BhBh2Bh6B().pack(_x.its_header.protocol_version, _x.its_header.message_id, _x.its_header.station_id, _x.generation_delta_time, _x.station_type.value, _x.reference_position.latitude, _x.reference_position.longitude, _x.reference_position.position_confidence.semi_major_confidence, _x.reference_position.position_confidence.semi_minor_confidence, _x.reference_position.position_confidence.semi_major_orientation, _x.reference_position.altitude.value, _x.reference_position.altitude.confidence, _x.high_frequency_container.heading.value, _x.high_frequency_container.heading.confidence, _x.high_frequency_container.speed.value, _x.high_frequency_container.speed.confidence, _x.high_frequency_container.drive_direction.value, _x.high_frequency_container.vehicle_length.value, _x.high_frequency_container.vehicle_length.confidence_indication, _x.high_frequency_container.vehicle_width.value, _x.high_frequency_container.longitudinal_acceleration.value, _x.high_frequency_container.longitudinal_acceleration.confidence, _x.high_frequency_container.curvature.value, _x.high_frequency_container.curvature.confidence, _x.high_frequency_container.curvature_calculation_mode.value, _x.high_frequency_container.yaw_rate.value, _x.high_frequency_container.yaw_rate.confidence, _x.high_frequency_container.has_acceleration_control, _x.high_frequency_container.acceleration_control.value, _x.has_low_frequency_container, _x.low_frequency_container.vehicle_role.value, _x.low_frequency_container.exterior_lights.value))
      length = len(self.low_frequency_container.path_history.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.low_frequency_container.path_history.points:
        _v1 = val1.path_position
        _x = _v1
        buff.write(_get_struct_2ih().pack(_x.delta_latitude, _x.delta_longitude, _x.delta_altitude))
        _v2 = val1.path_delta_time
        _x = _v2.value
        buff.write(_get_struct_H().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.its_header is None:
        self.its_header = etsi_msgs.msg.ItsPduHeader()
      if self.station_type is None:
        self.station_type = etsi_msgs.msg.StationType()
      if self.reference_position is None:
        self.reference_position = etsi_msgs.msg.ReferencePosition()
      if self.high_frequency_container is None:
        self.high_frequency_container = etsi_msgs.msg.BasicVehicleContainerHighFrequency()
      if self.low_frequency_container is None:
        self.low_frequency_container = etsi_msgs.msg.BasicVehicleContainerLowFrequency()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 62
      (_x.its_header.protocol_version, _x.its_header.message_id, _x.its_header.station_id, _x.generation_delta_time, _x.station_type.value, _x.reference_position.latitude, _x.reference_position.longitude, _x.reference_position.position_confidence.semi_major_confidence, _x.reference_position.position_confidence.semi_minor_confidence, _x.reference_position.position_confidence.semi_major_orientation, _x.reference_position.altitude.value, _x.reference_position.altitude.confidence, _x.high_frequency_container.heading.value, _x.high_frequency_container.heading.confidence, _x.high_frequency_container.speed.value, _x.high_frequency_container.speed.confidence, _x.high_frequency_container.drive_direction.value, _x.high_frequency_container.vehicle_length.value, _x.high_frequency_container.vehicle_length.confidence_indication, _x.high_frequency_container.vehicle_width.value, _x.high_frequency_container.longitudinal_acceleration.value, _x.high_frequency_container.longitudinal_acceleration.confidence, _x.high_frequency_container.curvature.value, _x.high_frequency_container.curvature.confidence, _x.high_frequency_container.curvature_calculation_mode.value, _x.high_frequency_container.yaw_rate.value, _x.high_frequency_container.yaw_rate.confidence, _x.high_frequency_container.has_acceleration_control, _x.high_frequency_container.acceleration_control.value, _x.has_low_frequency_container, _x.low_frequency_container.vehicle_role.value, _x.low_frequency_container.exterior_lights.value,) = _get_struct_2BIHB2q3HiBHBH2BH2BhBh2Bh6B().unpack(str[start:end])
      self.high_frequency_container.has_acceleration_control = bool(self.high_frequency_container.has_acceleration_control)
      self.has_low_frequency_container = bool(self.has_low_frequency_container)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.low_frequency_container.path_history.points = []
      for i in range(0, length):
        val1 = etsi_msgs.msg.PathPoint()
        _v3 = val1.path_position
        _x = _v3
        start = end
        end += 10
        (_x.delta_latitude, _x.delta_longitude, _x.delta_altitude,) = _get_struct_2ih().unpack(str[start:end])
        _v4 = val1.path_delta_time
        start = end
        end += 2
        (_v4.value,) = _get_struct_H().unpack(str[start:end])
        self.low_frequency_container.path_history.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2BIHB2q3HiBHBH2BH2BhBh2Bh6B().pack(_x.its_header.protocol_version, _x.its_header.message_id, _x.its_header.station_id, _x.generation_delta_time, _x.station_type.value, _x.reference_position.latitude, _x.reference_position.longitude, _x.reference_position.position_confidence.semi_major_confidence, _x.reference_position.position_confidence.semi_minor_confidence, _x.reference_position.position_confidence.semi_major_orientation, _x.reference_position.altitude.value, _x.reference_position.altitude.confidence, _x.high_frequency_container.heading.value, _x.high_frequency_container.heading.confidence, _x.high_frequency_container.speed.value, _x.high_frequency_container.speed.confidence, _x.high_frequency_container.drive_direction.value, _x.high_frequency_container.vehicle_length.value, _x.high_frequency_container.vehicle_length.confidence_indication, _x.high_frequency_container.vehicle_width.value, _x.high_frequency_container.longitudinal_acceleration.value, _x.high_frequency_container.longitudinal_acceleration.confidence, _x.high_frequency_container.curvature.value, _x.high_frequency_container.curvature.confidence, _x.high_frequency_container.curvature_calculation_mode.value, _x.high_frequency_container.yaw_rate.value, _x.high_frequency_container.yaw_rate.confidence, _x.high_frequency_container.has_acceleration_control, _x.high_frequency_container.acceleration_control.value, _x.has_low_frequency_container, _x.low_frequency_container.vehicle_role.value, _x.low_frequency_container.exterior_lights.value))
      length = len(self.low_frequency_container.path_history.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.low_frequency_container.path_history.points:
        _v5 = val1.path_position
        _x = _v5
        buff.write(_get_struct_2ih().pack(_x.delta_latitude, _x.delta_longitude, _x.delta_altitude))
        _v6 = val1.path_delta_time
        _x = _v6.value
        buff.write(_get_struct_H().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.its_header is None:
        self.its_header = etsi_msgs.msg.ItsPduHeader()
      if self.station_type is None:
        self.station_type = etsi_msgs.msg.StationType()
      if self.reference_position is None:
        self.reference_position = etsi_msgs.msg.ReferencePosition()
      if self.high_frequency_container is None:
        self.high_frequency_container = etsi_msgs.msg.BasicVehicleContainerHighFrequency()
      if self.low_frequency_container is None:
        self.low_frequency_container = etsi_msgs.msg.BasicVehicleContainerLowFrequency()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 62
      (_x.its_header.protocol_version, _x.its_header.message_id, _x.its_header.station_id, _x.generation_delta_time, _x.station_type.value, _x.reference_position.latitude, _x.reference_position.longitude, _x.reference_position.position_confidence.semi_major_confidence, _x.reference_position.position_confidence.semi_minor_confidence, _x.reference_position.position_confidence.semi_major_orientation, _x.reference_position.altitude.value, _x.reference_position.altitude.confidence, _x.high_frequency_container.heading.value, _x.high_frequency_container.heading.confidence, _x.high_frequency_container.speed.value, _x.high_frequency_container.speed.confidence, _x.high_frequency_container.drive_direction.value, _x.high_frequency_container.vehicle_length.value, _x.high_frequency_container.vehicle_length.confidence_indication, _x.high_frequency_container.vehicle_width.value, _x.high_frequency_container.longitudinal_acceleration.value, _x.high_frequency_container.longitudinal_acceleration.confidence, _x.high_frequency_container.curvature.value, _x.high_frequency_container.curvature.confidence, _x.high_frequency_container.curvature_calculation_mode.value, _x.high_frequency_container.yaw_rate.value, _x.high_frequency_container.yaw_rate.confidence, _x.high_frequency_container.has_acceleration_control, _x.high_frequency_container.acceleration_control.value, _x.has_low_frequency_container, _x.low_frequency_container.vehicle_role.value, _x.low_frequency_container.exterior_lights.value,) = _get_struct_2BIHB2q3HiBHBH2BH2BhBh2Bh6B().unpack(str[start:end])
      self.high_frequency_container.has_acceleration_control = bool(self.high_frequency_container.has_acceleration_control)
      self.has_low_frequency_container = bool(self.has_low_frequency_container)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.low_frequency_container.path_history.points = []
      for i in range(0, length):
        val1 = etsi_msgs.msg.PathPoint()
        _v7 = val1.path_position
        _x = _v7
        start = end
        end += 10
        (_x.delta_latitude, _x.delta_longitude, _x.delta_altitude,) = _get_struct_2ih().unpack(str[start:end])
        _v8 = val1.path_delta_time
        start = end
        end += 2
        (_v8.value,) = _get_struct_H().unpack(str[start:end])
        self.low_frequency_container.path_history.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2BIHB2q3HiBHBH2BH2BhBh2Bh6B = None
def _get_struct_2BIHB2q3HiBHBH2BH2BhBh2Bh6B():
    global _struct_2BIHB2q3HiBHBH2BH2BhBh2Bh6B
    if _struct_2BIHB2q3HiBHBH2BH2BhBh2Bh6B is None:
        _struct_2BIHB2q3HiBHBH2BH2BhBh2Bh6B = struct.Struct("<2BIHB2q3HiBHBH2BH2BhBh2Bh6B")
    return _struct_2BIHB2q3HiBHBH2BH2BhBh2Bh6B
_struct_2ih = None
def _get_struct_2ih():
    global _struct_2ih
    if _struct_2ih is None:
        _struct_2ih = struct.Struct("<2ih")
    return _struct_2ih
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
