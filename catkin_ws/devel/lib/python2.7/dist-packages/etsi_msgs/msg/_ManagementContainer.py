# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from etsi_msgs/ManagementContainer.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import etsi_msgs.msg

class ManagementContainer(genpy.Message):
  _md5sum = "9ce1c69ce5bfe1b0889eb5e906278318"
  _type = "etsi_msgs/ManagementContainer"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ActionID action_id
uint64 detection_time # ms since 2004
uint64 reference_time # ms since 2004
uint8 termination
ReferencePosition event_position
RelevanceDistance relevance_distance
RelevanceTrafficDirection relevance_traffic_direction
uint32 validity_duration # seconds
uint32 transmission_interval # milliseconds
StationType station_type

uint8 TERMINATION_CANCELLATION = 0
uint8 TERMINATION_NEGATION = 1
uint8 TERMINATION_UNAVAILABLE = 255

uint32 TRANSMISSION_INTERVAL_ONE_MILLISECOND = 1
uint32 TRANSMISSION_INTERVAL_TEN_SECONDS = 10000
uint32 TRANSMISSION_INTERVAL_UNAVAILABLE = 0

uint32 VALIDITY_DURATION_DEFAULT = 600
uint32 VALIDITY_DURATION_TIME_OF_DETECTION = 0
uint32 VALIDITY_DURATION_ONE_SECOND_AFTER_DETECTION = 1

================================================================================
MSG: etsi_msgs/ActionID
uint32 station_id
uint16 sequence_number

================================================================================
MSG: etsi_msgs/ReferencePosition
int64 latitude # 0.1 micro degree
int64 longitude # 0.1 micro degree
PositionConfidenceEllipse position_confidence
Altitude altitude

int64 LATITUDE_UNAVAILABLE = 900000001
int64 LONGITUDE_UNAVAILABLE = 1800000001

================================================================================
MSG: etsi_msgs/PositionConfidenceEllipse
uint16 semi_major_confidence # cm
uint16 semi_minor_confidence # cm
uint16 semi_major_orientation # 0.1 degree

uint16 SEMI_AXIS_LENGTH_OUT_OF_RANGE = 4094
uint16 SEMI_AXIS_LENGTH_UNAVAILABLE = 4095

================================================================================
MSG: etsi_msgs/Altitude
int32 value # 0.01 meter
uint8 confidence

int32 VALUE_REFERENCE_ELLIPSOID_SURFACE = 0
int32 VALUE_ONE_CENTIMETER = 1
int32 VALUE_UNAVAILABLE = 800001

uint8 CONFIDENCE_1CM = 0
uint8 CONFIDENCE_2CM = 1
uint8 CONFIDENCE_5CM = 2
uint8 CONFIDENCE_10CM = 3
uint8 CONFIDENCE_20CM = 4
uint8 CONFIDENCE_50CM = 5
uint8 CONFIDENCE_1M = 6
uint8 CONFIDENCE_2M = 7
uint8 CONFIDENCE_5M = 8
uint8 CONFIDENCE_10M = 9
uint8 CONFIDENCE_20M = 10
uint8 CONFIDENCE_50M = 11
uint8 CONFIDENCE_100M = 12
uint8 CONFIDENCE_200M = 13
uint8 CONFIDENCE_OUT_OF_RANGE = 14
uint8 CONFIDENCE_UNAVAILABLE = 15

================================================================================
MSG: etsi_msgs/RelevanceDistance
uint8 value

uint8 LESS_THAN_50M = 0
uint8 LESS_THAN_100M = 1
uint8 LESS_THAN_200M = 2
uint8 LESS_THAN_500M = 3
uint8 LESS_THAN_1000M = 4
uint8 LESS_THAN_5KM = 5
uint8 LESS_THAN_10KM = 6
uint8 OVER_10KM = 7
uint8 UNAVAILABLE = 255

================================================================================
MSG: etsi_msgs/RelevanceTrafficDirection
uint8 value

uint8 ALL_TRAFFIC_DIRECTIONS = 0
uint8 UPSTREAM_TRAFFIC = 1
uint8 DOWNSTREAM_TRAFFIC = 2
uint8 OPPOSITE_TRAFFIC = 3
uint8 UNAVAILABLE = 255 # extension to encode optional traffic directions

================================================================================
MSG: etsi_msgs/StationType
uint8 value

uint8 UNKNOWN = 0
uint8 PEDESTRIAN = 1
uint8 CYCLIST = 2
uint8 MOPED = 3
uint8 MOTORCYCLE = 4
uint8 PASSENGER_CAR = 5
uint8 BUS = 6
uint8 LIGHT_TRUCK = 7
uint8 HEAVY_TRUCK = 8
uint8 TRAILER = 9
uint8 SPECIAL_VEHICLE = 10
uint8 TRAM = 11
uint8 ROAD_SIDE_UNIT = 15
"""
  # Pseudo-constants
  TERMINATION_CANCELLATION = 0
  TERMINATION_NEGATION = 1
  TERMINATION_UNAVAILABLE = 255
  TRANSMISSION_INTERVAL_ONE_MILLISECOND = 1
  TRANSMISSION_INTERVAL_TEN_SECONDS = 10000
  TRANSMISSION_INTERVAL_UNAVAILABLE = 0
  VALIDITY_DURATION_DEFAULT = 600
  VALIDITY_DURATION_TIME_OF_DETECTION = 0
  VALIDITY_DURATION_ONE_SECOND_AFTER_DETECTION = 1

  __slots__ = ['action_id','detection_time','reference_time','termination','event_position','relevance_distance','relevance_traffic_direction','validity_duration','transmission_interval','station_type']
  _slot_types = ['etsi_msgs/ActionID','uint64','uint64','uint8','etsi_msgs/ReferencePosition','etsi_msgs/RelevanceDistance','etsi_msgs/RelevanceTrafficDirection','uint32','uint32','etsi_msgs/StationType']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_id,detection_time,reference_time,termination,event_position,relevance_distance,relevance_traffic_direction,validity_duration,transmission_interval,station_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ManagementContainer, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_id is None:
        self.action_id = etsi_msgs.msg.ActionID()
      if self.detection_time is None:
        self.detection_time = 0
      if self.reference_time is None:
        self.reference_time = 0
      if self.termination is None:
        self.termination = 0
      if self.event_position is None:
        self.event_position = etsi_msgs.msg.ReferencePosition()
      if self.relevance_distance is None:
        self.relevance_distance = etsi_msgs.msg.RelevanceDistance()
      if self.relevance_traffic_direction is None:
        self.relevance_traffic_direction = etsi_msgs.msg.RelevanceTrafficDirection()
      if self.validity_duration is None:
        self.validity_duration = 0
      if self.transmission_interval is None:
        self.transmission_interval = 0
      if self.station_type is None:
        self.station_type = etsi_msgs.msg.StationType()
    else:
      self.action_id = etsi_msgs.msg.ActionID()
      self.detection_time = 0
      self.reference_time = 0
      self.termination = 0
      self.event_position = etsi_msgs.msg.ReferencePosition()
      self.relevance_distance = etsi_msgs.msg.RelevanceDistance()
      self.relevance_traffic_direction = etsi_msgs.msg.RelevanceTrafficDirection()
      self.validity_duration = 0
      self.transmission_interval = 0
      self.station_type = etsi_msgs.msg.StationType()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_IH2QB2q3Hi3B2IB().pack(_x.action_id.station_id, _x.action_id.sequence_number, _x.detection_time, _x.reference_time, _x.termination, _x.event_position.latitude, _x.event_position.longitude, _x.event_position.position_confidence.semi_major_confidence, _x.event_position.position_confidence.semi_minor_confidence, _x.event_position.position_confidence.semi_major_orientation, _x.event_position.altitude.value, _x.event_position.altitude.confidence, _x.relevance_distance.value, _x.relevance_traffic_direction.value, _x.validity_duration, _x.transmission_interval, _x.station_type.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_id is None:
        self.action_id = etsi_msgs.msg.ActionID()
      if self.event_position is None:
        self.event_position = etsi_msgs.msg.ReferencePosition()
      if self.relevance_distance is None:
        self.relevance_distance = etsi_msgs.msg.RelevanceDistance()
      if self.relevance_traffic_direction is None:
        self.relevance_traffic_direction = etsi_msgs.msg.RelevanceTrafficDirection()
      if self.station_type is None:
        self.station_type = etsi_msgs.msg.StationType()
      end = 0
      _x = self
      start = end
      end += 61
      (_x.action_id.station_id, _x.action_id.sequence_number, _x.detection_time, _x.reference_time, _x.termination, _x.event_position.latitude, _x.event_position.longitude, _x.event_position.position_confidence.semi_major_confidence, _x.event_position.position_confidence.semi_minor_confidence, _x.event_position.position_confidence.semi_major_orientation, _x.event_position.altitude.value, _x.event_position.altitude.confidence, _x.relevance_distance.value, _x.relevance_traffic_direction.value, _x.validity_duration, _x.transmission_interval, _x.station_type.value,) = _get_struct_IH2QB2q3Hi3B2IB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_IH2QB2q3Hi3B2IB().pack(_x.action_id.station_id, _x.action_id.sequence_number, _x.detection_time, _x.reference_time, _x.termination, _x.event_position.latitude, _x.event_position.longitude, _x.event_position.position_confidence.semi_major_confidence, _x.event_position.position_confidence.semi_minor_confidence, _x.event_position.position_confidence.semi_major_orientation, _x.event_position.altitude.value, _x.event_position.altitude.confidence, _x.relevance_distance.value, _x.relevance_traffic_direction.value, _x.validity_duration, _x.transmission_interval, _x.station_type.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_id is None:
        self.action_id = etsi_msgs.msg.ActionID()
      if self.event_position is None:
        self.event_position = etsi_msgs.msg.ReferencePosition()
      if self.relevance_distance is None:
        self.relevance_distance = etsi_msgs.msg.RelevanceDistance()
      if self.relevance_traffic_direction is None:
        self.relevance_traffic_direction = etsi_msgs.msg.RelevanceTrafficDirection()
      if self.station_type is None:
        self.station_type = etsi_msgs.msg.StationType()
      end = 0
      _x = self
      start = end
      end += 61
      (_x.action_id.station_id, _x.action_id.sequence_number, _x.detection_time, _x.reference_time, _x.termination, _x.event_position.latitude, _x.event_position.longitude, _x.event_position.position_confidence.semi_major_confidence, _x.event_position.position_confidence.semi_minor_confidence, _x.event_position.position_confidence.semi_major_orientation, _x.event_position.altitude.value, _x.event_position.altitude.confidence, _x.relevance_distance.value, _x.relevance_traffic_direction.value, _x.validity_duration, _x.transmission_interval, _x.station_type.value,) = _get_struct_IH2QB2q3Hi3B2IB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IH2QB2q3Hi3B2IB = None
def _get_struct_IH2QB2q3Hi3B2IB():
    global _struct_IH2QB2q3Hi3B2IB
    if _struct_IH2QB2q3Hi3B2IB is None:
        _struct_IH2QB2q3Hi3B2IB = struct.Struct("<IH2QB2q3Hi3B2IB")
    return _struct_IH2QB2q3Hi3B2IB
