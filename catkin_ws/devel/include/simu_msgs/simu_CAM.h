// Generated by gencpp from file simu_msgs/simu_CAM.msg
// DO NOT EDIT!


#ifndef SIMU_MSGS_MESSAGE_SIMU_CAM_H
#define SIMU_MSGS_MESSAGE_SIMU_CAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <simu_msgs/ItsPduHeader.h>
#include <simu_msgs/Speed.h>
#include <simu_msgs/ReferencePosition.h>
#include <simu_msgs/VehicleLength.h>

namespace simu_msgs
{
template <class ContainerAllocator>
struct simu_CAM_
{
  typedef simu_CAM_<ContainerAllocator> Type;

  simu_CAM_()
    : header()
    , its_header()
    , speed()
    , reference_position()
    , vehicle_length()
    , rank(0)
    , interdistance(0)
    , dest(0)
    , yaw_rate(0)  {
    }
  simu_CAM_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , its_header(_alloc)
    , speed(_alloc)
    , reference_position(_alloc)
    , vehicle_length(_alloc)
    , rank(0)
    , interdistance(0)
    , dest(0)
    , yaw_rate(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::simu_msgs::ItsPduHeader_<ContainerAllocator>  _its_header_type;
  _its_header_type its_header;

   typedef  ::simu_msgs::Speed_<ContainerAllocator>  _speed_type;
  _speed_type speed;

   typedef  ::simu_msgs::ReferencePosition_<ContainerAllocator>  _reference_position_type;
  _reference_position_type reference_position;

   typedef  ::simu_msgs::VehicleLength_<ContainerAllocator>  _vehicle_length_type;
  _vehicle_length_type vehicle_length;

   typedef uint8_t _rank_type;
  _rank_type rank;

   typedef uint32_t _interdistance_type;
  _interdistance_type interdistance;

   typedef uint8_t _dest_type;
  _dest_type dest;

   typedef int16_t _yaw_rate_type;
  _yaw_rate_type yaw_rate;





  typedef boost::shared_ptr< ::simu_msgs::simu_CAM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simu_msgs::simu_CAM_<ContainerAllocator> const> ConstPtr;

}; // struct simu_CAM_

typedef ::simu_msgs::simu_CAM_<std::allocator<void> > simu_CAM;

typedef boost::shared_ptr< ::simu_msgs::simu_CAM > simu_CAMPtr;
typedef boost::shared_ptr< ::simu_msgs::simu_CAM const> simu_CAMConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simu_msgs::simu_CAM_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simu_msgs::simu_CAM_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace simu_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'simu_msgs': ['/home/ppe2021/catkin_ws/src/simu_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::simu_msgs::simu_CAM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simu_msgs::simu_CAM_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simu_msgs::simu_CAM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simu_msgs::simu_CAM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simu_msgs::simu_CAM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simu_msgs::simu_CAM_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simu_msgs::simu_CAM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57b39355d3eb18289ce69aca4d0b91b8";
  }

  static const char* value(const ::simu_msgs::simu_CAM_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57b39355d3eb1828ULL;
  static const uint64_t static_value2 = 0x9ce69aca4d0b91b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::simu_msgs::simu_CAM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simu_msgs/simu_CAM";
  }

  static const char* value(const ::simu_msgs::simu_CAM_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simu_msgs::simu_CAM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header \n\
ItsPduHeader its_header\n\
Speed speed\n\
ReferencePosition reference_position\n\
VehicleLength vehicle_length\n\
uint8 rank\n\
uint32 interdistance\n\
uint8 dest\n\
int16 yaw_rate\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: simu_msgs/ItsPduHeader\n\
uint8 protocol_version\n\
uint8 message_id\n\
uint32 station_id\n\
\n\
uint8 MESSAGE_ID_DENM = 1\n\
uint8 MESSAGE_ID_CAM = 2\n\
\n\
================================================================================\n\
MSG: simu_msgs/Speed\n\
uint16 value # 0.01 m/s\n\
uint8 confidence # 0.01 m/s\n\
\n\
uint16 VALUE_STANDSTILL = 0\n\
uint16 VALUE_ONE_CENTIMETER_PER_SECOND = 1\n\
uint16 VALUE_UNAVAILABLE = 16383\n\
\n\
uint8 CONFIDENCE_OUT_OF_RANGE = 126\n\
uint8 CONFIDENCE_UNAVAILABLE = 127\n\
\n\
================================================================================\n\
MSG: simu_msgs/ReferencePosition\n\
int64 latitude # 0.1 micro degree\n\
int64 longitude # 0.1 micro degree\n\
PositionConfidenceEllipse position_confidence\n\
Altitude altitude\n\
\n\
int64 LATITUDE_UNAVAILABLE = 900000001\n\
int64 LONGITUDE_UNAVAILABLE = 1800000001\n\
\n\
================================================================================\n\
MSG: simu_msgs/PositionConfidenceEllipse\n\
uint16 semi_major_confidence # cm\n\
uint16 semi_minor_confidence # cm\n\
uint16 semi_major_orientation # 0.1 degree\n\
\n\
uint16 SEMI_AXIS_LENGTH_OUT_OF_RANGE = 4094\n\
uint16 SEMI_AXIS_LENGTH_UNAVAILABLE = 4095\n\
\n\
================================================================================\n\
MSG: simu_msgs/Altitude\n\
int32 value # 0.01 meter\n\
uint8 confidence\n\
\n\
int32 VALUE_REFERENCE_ELLIPSOID_SURFACE = 0\n\
int32 VALUE_ONE_CENTIMETER = 1\n\
int32 VALUE_UNAVAILABLE = 800001\n\
\n\
uint8 CONFIDENCE_1CM = 0\n\
uint8 CONFIDENCE_2CM = 1\n\
uint8 CONFIDENCE_5CM = 2\n\
uint8 CONFIDENCE_10CM = 3\n\
uint8 CONFIDENCE_20CM = 4\n\
uint8 CONFIDENCE_50CM = 5\n\
uint8 CONFIDENCE_1M = 6\n\
uint8 CONFIDENCE_2M = 7\n\
uint8 CONFIDENCE_5M = 8\n\
uint8 CONFIDENCE_10M = 9\n\
uint8 CONFIDENCE_20M = 10\n\
uint8 CONFIDENCE_50M = 11\n\
uint8 CONFIDENCE_100M = 12\n\
uint8 CONFIDENCE_200M = 13\n\
uint8 CONFIDENCE_OUT_OF_RANGE = 14\n\
uint8 CONFIDENCE_UNAVAILABLE = 15\n\
\n\
================================================================================\n\
MSG: simu_msgs/VehicleLength\n\
uint16 value # 0.1 meter\n\
uint8 confidence_indication\n\
\n\
uint16 VALUE_TEN_CENTIMETERS = 1\n\
uint16 VALUE_OUT_OF_RANGE = 1022\n\
uint16 VALUE_UNAVAILABLE = 1023\n\
\n\
uint8 CONFIDENCE_INDICATION_NO_TRAILER = 0\n\
uint8 CONFIDENCE_INDICATION_TRAILER_WITH_KNOWN_LENGTH = 1\n\
uint8 CONFIDENCE_INDICATION_TRAILER_WITH_UNKNOWN_LENGTH = 2\n\
uint8 CONFIDENCE_INDICATION_UNKNOWN_TRAILER_PRESENCE = 3\n\
uint8 CONFIDENCE_INDICATION_UNAVAILABLE = 4\n\
";
  }

  static const char* value(const ::simu_msgs::simu_CAM_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simu_msgs::simu_CAM_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.its_header);
      stream.next(m.speed);
      stream.next(m.reference_position);
      stream.next(m.vehicle_length);
      stream.next(m.rank);
      stream.next(m.interdistance);
      stream.next(m.dest);
      stream.next(m.yaw_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct simu_CAM_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simu_msgs::simu_CAM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simu_msgs::simu_CAM_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "its_header: ";
    s << std::endl;
    Printer< ::simu_msgs::ItsPduHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.its_header);
    s << indent << "speed: ";
    s << std::endl;
    Printer< ::simu_msgs::Speed_<ContainerAllocator> >::stream(s, indent + "  ", v.speed);
    s << indent << "reference_position: ";
    s << std::endl;
    Printer< ::simu_msgs::ReferencePosition_<ContainerAllocator> >::stream(s, indent + "  ", v.reference_position);
    s << indent << "vehicle_length: ";
    s << std::endl;
    Printer< ::simu_msgs::VehicleLength_<ContainerAllocator> >::stream(s, indent + "  ", v.vehicle_length);
    s << indent << "rank: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rank);
    s << indent << "interdistance: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.interdistance);
    s << indent << "dest: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dest);
    s << indent << "yaw_rate: ";
    Printer<int16_t>::stream(s, indent + "  ", v.yaw_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMU_MSGS_MESSAGE_SIMU_CAM_H
