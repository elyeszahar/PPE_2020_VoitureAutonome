// Generated by gencpp from file etsi_msgs/LocationContainer.msg
// DO NOT EDIT!


#ifndef ETSI_MSGS_MESSAGE_LOCATIONCONTAINER_H
#define ETSI_MSGS_MESSAGE_LOCATIONCONTAINER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <etsi_msgs/Speed.h>
#include <etsi_msgs/Heading.h>
#include <etsi_msgs/PathHistory.h>
#include <etsi_msgs/plugin/LocationContainer.h>

namespace etsi_msgs
{
template <class ContainerAllocator>
struct LocationContainer_
{
  typedef LocationContainer_<ContainerAllocator> Type;

#ifdef ETSI_MSGS_MESSAGE_LOCATIONCONTAINER_PLUGIN_CONSTRUCTOR
  ETSI_MSGS_MESSAGE_LOCATIONCONTAINER_PLUGIN_CONSTRUCTOR
#else
  LocationContainer_()
    : event_speed()
    , event_position_heading()
    , traces()
    , road_type(0)  {
    }
  LocationContainer_(const ContainerAllocator& _alloc)
    : event_speed(_alloc)
    , event_position_heading(_alloc)
    , traces(_alloc)
    , road_type(0)  {
  (void)_alloc;
    }

#endif


   typedef  ::etsi_msgs::Speed_<ContainerAllocator>  _event_speed_type;
  _event_speed_type event_speed;

   typedef  ::etsi_msgs::Heading_<ContainerAllocator>  _event_position_heading_type;
  _event_position_heading_type event_position_heading;

   typedef std::vector< ::etsi_msgs::PathHistory_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::etsi_msgs::PathHistory_<ContainerAllocator> >::other >  _traces_type;
  _traces_type traces;

   typedef uint8_t _road_type_type;
  _road_type_type road_type;



  enum {
    ROAD_TYPE_URBAN_NO_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 0u,
    ROAD_TYPE_URBAN_WITH_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 1u,
    ROAD_TYPE_NON_URBAN_NO_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 2u,
    ROAD_TYPE_NON_URBAN_WITH_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 3u,
    ROAD_TYPE_UNAVAILABLE = 255u,
  };


  typedef boost::shared_ptr< ::etsi_msgs::LocationContainer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::etsi_msgs::LocationContainer_<ContainerAllocator> const> ConstPtr;

#ifdef ETSI_MSGS_MESSAGE_LOCATIONCONTAINER_PLUGIN_CLASS_BODY
  ETSI_MSGS_MESSAGE_LOCATIONCONTAINER_PLUGIN_CLASS_BODY
#endif
}; // struct LocationContainer_

typedef ::etsi_msgs::LocationContainer_<std::allocator<void> > LocationContainer;

typedef boost::shared_ptr< ::etsi_msgs::LocationContainer > LocationContainerPtr;
typedef boost::shared_ptr< ::etsi_msgs::LocationContainer const> LocationContainerConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::etsi_msgs::LocationContainer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::etsi_msgs::LocationContainer_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace etsi_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'etsi_msgs': ['/home/ppe2021/catkin_ws/src/etsi_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::etsi_msgs::LocationContainer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::etsi_msgs::LocationContainer_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etsi_msgs::LocationContainer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etsi_msgs::LocationContainer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etsi_msgs::LocationContainer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etsi_msgs::LocationContainer_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::etsi_msgs::LocationContainer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a09dcf7fff0ab0b3181252f05813385c";
  }

  static const char* value(const ::etsi_msgs::LocationContainer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa09dcf7fff0ab0b3ULL;
  static const uint64_t static_value2 = 0x181252f05813385cULL;
};

template<class ContainerAllocator>
struct DataType< ::etsi_msgs::LocationContainer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "etsi_msgs/LocationContainer";
  }

  static const char* value(const ::etsi_msgs::LocationContainer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::etsi_msgs::LocationContainer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Speed event_speed\n\
Heading event_position_heading\n\
PathHistory[] traces\n\
uint8 road_type\n\
\n\
uint8 ROAD_TYPE_URBAN_NO_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 0\n\
uint8 ROAD_TYPE_URBAN_WITH_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 1\n\
uint8 ROAD_TYPE_NON_URBAN_NO_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 2\n\
uint8 ROAD_TYPE_NON_URBAN_WITH_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 3\n\
uint8 ROAD_TYPE_UNAVAILABLE = 255\n\
\n\
================================================================================\n\
MSG: etsi_msgs/Speed\n\
uint16 value # 0.01 m/s\n\
uint8 confidence # 0.01 m/s\n\
\n\
uint16 VALUE_STANDSTILL = 0\n\
uint16 VALUE_ONE_CENTIMETER_PER_SECOND = 1\n\
uint16 VALUE_UNAVAILABLE = 16383\n\
\n\
uint8 CONFIDENCE_OUT_OF_RANGE = 126\n\
uint8 CONFIDENCE_UNAVAILABLE = 127\n\
\n\
================================================================================\n\
MSG: etsi_msgs/Heading\n\
uint16 value # 0.1 degree\n\
uint8 confidence\n\
\n\
uint16 VALUE_NORTH = 0\n\
uint16 VALUE_EAST = 900\n\
uint16 VALUE_SOUTH = 1800\n\
uint16 VALUE_WEST = 2700\n\
uint16 VALUE_UNAVAILABLE = 3601\n\
\n\
uint8 CONFIDENCE_ZERO_POINT_ONE_DEGREE = 1\n\
uint8 CONFIDENCE_ONE_DEGREE = 10\n\
uint8 CONFIDENCE_OUT_OF_RANGE = 126\n\
uint8 CONFIDENCE_UNAVAILABLE = 127\n\
\n\
================================================================================\n\
MSG: etsi_msgs/PathHistory\n\
PathPoint[] points\n\
\n\
================================================================================\n\
MSG: etsi_msgs/PathPoint\n\
DeltaReferencePosition path_position\n\
PathDeltaTime path_delta_time\n\
\n\
================================================================================\n\
MSG: etsi_msgs/DeltaReferencePosition\n\
int32 delta_latitude # 0.1 micro degree\n\
int32 delta_longitude # 0.1 micro degree\n\
int16 delta_altitude # centimeter\n\
\n\
int32 ONE_MICRODEGREE_NORTH = 10\n\
int32 ONE_MICRODEGREE_SOUTH = -10\n\
int32 ONE_MICRODEGREE_EAST = 10\n\
int32 ONE_MICRODEGREE_WEST = -10\n\
int32 ONE_CENTIMETER_UP = 1\n\
int32 ONE_CENTIMETER_DOWN = -1\n\
int32 LATITUDE_UNAVAILABLE = 131072\n\
int32 LONGITUDE_UNAVAILABLE = 131072\n\
int16 ALTITUDE_UNAVAILABLE = 12800\n\
\n\
================================================================================\n\
MSG: etsi_msgs/PathDeltaTime\n\
uint16 value # 10 ms\n\
\n\
uint16 UNAVAILABLE = 0\n\
uint16 TEN_MILLISECONDS_IN_PAST = 1\n\
";
  }

  static const char* value(const ::etsi_msgs::LocationContainer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

#ifdef ETSI_MSGS_MESSAGE_LOCATIONCONTAINER_PLUGIN_SERIALIZER
  ETSI_MSGS_MESSAGE_LOCATIONCONTAINER_PLUGIN_SERIALIZER
#else
  template<class ContainerAllocator> struct Serializer< ::etsi_msgs::LocationContainer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.event_speed);
      stream.next(m.event_position_heading);
      stream.next(m.traces);
      stream.next(m.road_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocationContainer_
#endif

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

#ifdef ETSI_MSGS_MESSAGE_LOCATIONCONTAINER_PLUGIN_PRINTER
  ETSI_MSGS_MESSAGE_LOCATIONCONTAINER_PLUGIN_PRINTER
#else
template<class ContainerAllocator>
struct Printer< ::etsi_msgs::LocationContainer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::etsi_msgs::LocationContainer_<ContainerAllocator>& v)
  {
    s << indent << "event_speed: ";
    s << std::endl;
    Printer< ::etsi_msgs::Speed_<ContainerAllocator> >::stream(s, indent + "  ", v.event_speed);
    s << indent << "event_position_heading: ";
    s << std::endl;
    Printer< ::etsi_msgs::Heading_<ContainerAllocator> >::stream(s, indent + "  ", v.event_position_heading);
    s << indent << "traces[]" << std::endl;
    for (size_t i = 0; i < v.traces.size(); ++i)
    {
      s << indent << "  traces[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::etsi_msgs::PathHistory_<ContainerAllocator> >::stream(s, indent + "    ", v.traces[i]);
    }
    s << indent << "road_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.road_type);
  }
};
#endif

} // namespace message_operations
} // namespace ros

#endif // ETSI_MSGS_MESSAGE_LOCATIONCONTAINER_H
