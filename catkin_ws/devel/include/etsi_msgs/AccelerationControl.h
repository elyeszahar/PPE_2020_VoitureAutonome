// Generated by gencpp from file etsi_msgs/AccelerationControl.msg
// DO NOT EDIT!


#ifndef ETSI_MSGS_MESSAGE_ACCELERATIONCONTROL_H
#define ETSI_MSGS_MESSAGE_ACCELERATIONCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace etsi_msgs
{
template <class ContainerAllocator>
struct AccelerationControl_
{
  typedef AccelerationControl_<ContainerAllocator> Type;

  AccelerationControl_()
    : value(0)  {
    }
  AccelerationControl_(const ContainerAllocator& _alloc)
    : value(0)  {
  (void)_alloc;
    }



   typedef uint8_t _value_type;
  _value_type value;



  enum {
    BRAKE_PEDAL_ENGAGED = 1u,
    GAS_PEDAL_ENGAGED = 2u,
    EMERGENCY_BRAKE_ENGAGED = 4u,
    COLLISION_WARNING_ENGAGED = 8u,
    ACC_ENGAGED = 16u,
    CRUISE_CONTROL_ENGAGED = 32u,
    SPEED_LIMITER_ENGAGED = 64u,
  };


  typedef boost::shared_ptr< ::etsi_msgs::AccelerationControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::etsi_msgs::AccelerationControl_<ContainerAllocator> const> ConstPtr;

}; // struct AccelerationControl_

typedef ::etsi_msgs::AccelerationControl_<std::allocator<void> > AccelerationControl;

typedef boost::shared_ptr< ::etsi_msgs::AccelerationControl > AccelerationControlPtr;
typedef boost::shared_ptr< ::etsi_msgs::AccelerationControl const> AccelerationControlConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::etsi_msgs::AccelerationControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::etsi_msgs::AccelerationControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace etsi_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'etsi_msgs': ['/home/ppe2021/catkin_ws/src/etsi_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::etsi_msgs::AccelerationControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::etsi_msgs::AccelerationControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etsi_msgs::AccelerationControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etsi_msgs::AccelerationControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etsi_msgs::AccelerationControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etsi_msgs::AccelerationControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::etsi_msgs::AccelerationControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95585d5f00fa07f89453fa3109d62a8a";
  }

  static const char* value(const ::etsi_msgs::AccelerationControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95585d5f00fa07f8ULL;
  static const uint64_t static_value2 = 0x9453fa3109d62a8aULL;
};

template<class ContainerAllocator>
struct DataType< ::etsi_msgs::AccelerationControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "etsi_msgs/AccelerationControl";
  }

  static const char* value(const ::etsi_msgs::AccelerationControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::etsi_msgs::AccelerationControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 value\n\
\n\
uint8 BRAKE_PEDAL_ENGAGED = 1\n\
uint8 GAS_PEDAL_ENGAGED = 2\n\
uint8 EMERGENCY_BRAKE_ENGAGED = 4\n\
uint8 COLLISION_WARNING_ENGAGED = 8\n\
uint8 ACC_ENGAGED = 16\n\
uint8 CRUISE_CONTROL_ENGAGED = 32\n\
uint8 SPEED_LIMITER_ENGAGED = 64\n\
";
  }

  static const char* value(const ::etsi_msgs::AccelerationControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::etsi_msgs::AccelerationControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AccelerationControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::etsi_msgs::AccelerationControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::etsi_msgs::AccelerationControl_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ETSI_MSGS_MESSAGE_ACCELERATIONCONTROL_H
