// Generated by gencpp from file etsi_msgs/ManagementContainer.msg
// DO NOT EDIT!


#ifndef ETSI_MSGS_MESSAGE_MANAGEMENTCONTAINER_H
#define ETSI_MSGS_MESSAGE_MANAGEMENTCONTAINER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <etsi_msgs/ActionID.h>
#include <etsi_msgs/ReferencePosition.h>
#include <etsi_msgs/RelevanceDistance.h>
#include <etsi_msgs/RelevanceTrafficDirection.h>
#include <etsi_msgs/StationType.h>
#include <etsi_msgs/plugin/ManagementContainer.h>

namespace etsi_msgs
{
template <class ContainerAllocator>
struct ManagementContainer_
{
  typedef ManagementContainer_<ContainerAllocator> Type;

#ifdef ETSI_MSGS_MESSAGE_MANAGEMENTCONTAINER_PLUGIN_CONSTRUCTOR
  ETSI_MSGS_MESSAGE_MANAGEMENTCONTAINER_PLUGIN_CONSTRUCTOR
#else
  ManagementContainer_()
    : action_id()
    , detection_time(0)
    , reference_time(0)
    , termination(0)
    , event_position()
    , relevance_distance()
    , relevance_traffic_direction()
    , validity_duration(0)
    , transmission_interval(0)
    , station_type()  {
    }
  ManagementContainer_(const ContainerAllocator& _alloc)
    : action_id(_alloc)
    , detection_time(0)
    , reference_time(0)
    , termination(0)
    , event_position(_alloc)
    , relevance_distance(_alloc)
    , relevance_traffic_direction(_alloc)
    , validity_duration(0)
    , transmission_interval(0)
    , station_type(_alloc)  {
  (void)_alloc;
    }

#endif


   typedef  ::etsi_msgs::ActionID_<ContainerAllocator>  _action_id_type;
  _action_id_type action_id;

   typedef uint64_t _detection_time_type;
  _detection_time_type detection_time;

   typedef uint64_t _reference_time_type;
  _reference_time_type reference_time;

   typedef uint8_t _termination_type;
  _termination_type termination;

   typedef  ::etsi_msgs::ReferencePosition_<ContainerAllocator>  _event_position_type;
  _event_position_type event_position;

   typedef  ::etsi_msgs::RelevanceDistance_<ContainerAllocator>  _relevance_distance_type;
  _relevance_distance_type relevance_distance;

   typedef  ::etsi_msgs::RelevanceTrafficDirection_<ContainerAllocator>  _relevance_traffic_direction_type;
  _relevance_traffic_direction_type relevance_traffic_direction;

   typedef uint32_t _validity_duration_type;
  _validity_duration_type validity_duration;

   typedef uint32_t _transmission_interval_type;
  _transmission_interval_type transmission_interval;

   typedef  ::etsi_msgs::StationType_<ContainerAllocator>  _station_type_type;
  _station_type_type station_type;



  enum {
    TERMINATION_CANCELLATION = 0u,
    TERMINATION_NEGATION = 1u,
    TERMINATION_UNAVAILABLE = 255u,
    TRANSMISSION_INTERVAL_ONE_MILLISECOND = 1u,
    TRANSMISSION_INTERVAL_TEN_SECONDS = 10000u,
    TRANSMISSION_INTERVAL_UNAVAILABLE = 0u,
    VALIDITY_DURATION_DEFAULT = 600u,
    VALIDITY_DURATION_TIME_OF_DETECTION = 0u,
    VALIDITY_DURATION_ONE_SECOND_AFTER_DETECTION = 1u,
  };


  typedef boost::shared_ptr< ::etsi_msgs::ManagementContainer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::etsi_msgs::ManagementContainer_<ContainerAllocator> const> ConstPtr;

#ifdef ETSI_MSGS_MESSAGE_MANAGEMENTCONTAINER_PLUGIN_CLASS_BODY
  ETSI_MSGS_MESSAGE_MANAGEMENTCONTAINER_PLUGIN_CLASS_BODY
#endif
}; // struct ManagementContainer_

typedef ::etsi_msgs::ManagementContainer_<std::allocator<void> > ManagementContainer;

typedef boost::shared_ptr< ::etsi_msgs::ManagementContainer > ManagementContainerPtr;
typedef boost::shared_ptr< ::etsi_msgs::ManagementContainer const> ManagementContainerConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::etsi_msgs::ManagementContainer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::etsi_msgs::ManagementContainer_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace etsi_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'etsi_msgs': ['/home/ppe2021/catkin_ws/src/etsi_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::etsi_msgs::ManagementContainer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::etsi_msgs::ManagementContainer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etsi_msgs::ManagementContainer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etsi_msgs::ManagementContainer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etsi_msgs::ManagementContainer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etsi_msgs::ManagementContainer_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::etsi_msgs::ManagementContainer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ce1c69ce5bfe1b0889eb5e906278318";
  }

  static const char* value(const ::etsi_msgs::ManagementContainer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ce1c69ce5bfe1b0ULL;
  static const uint64_t static_value2 = 0x889eb5e906278318ULL;
};

template<class ContainerAllocator>
struct DataType< ::etsi_msgs::ManagementContainer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "etsi_msgs/ManagementContainer";
  }

  static const char* value(const ::etsi_msgs::ManagementContainer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::etsi_msgs::ManagementContainer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ActionID action_id\n\
uint64 detection_time # ms since 2004\n\
uint64 reference_time # ms since 2004\n\
uint8 termination\n\
ReferencePosition event_position\n\
RelevanceDistance relevance_distance\n\
RelevanceTrafficDirection relevance_traffic_direction\n\
uint32 validity_duration # seconds\n\
uint32 transmission_interval # milliseconds\n\
StationType station_type\n\
\n\
uint8 TERMINATION_CANCELLATION = 0\n\
uint8 TERMINATION_NEGATION = 1\n\
uint8 TERMINATION_UNAVAILABLE = 255\n\
\n\
uint32 TRANSMISSION_INTERVAL_ONE_MILLISECOND = 1\n\
uint32 TRANSMISSION_INTERVAL_TEN_SECONDS = 10000\n\
uint32 TRANSMISSION_INTERVAL_UNAVAILABLE = 0\n\
\n\
uint32 VALIDITY_DURATION_DEFAULT = 600\n\
uint32 VALIDITY_DURATION_TIME_OF_DETECTION = 0\n\
uint32 VALIDITY_DURATION_ONE_SECOND_AFTER_DETECTION = 1\n\
\n\
================================================================================\n\
MSG: etsi_msgs/ActionID\n\
uint32 station_id\n\
uint16 sequence_number\n\
\n\
================================================================================\n\
MSG: etsi_msgs/ReferencePosition\n\
int64 latitude # 0.1 micro degree\n\
int64 longitude # 0.1 micro degree\n\
PositionConfidenceEllipse position_confidence\n\
Altitude altitude\n\
\n\
int64 LATITUDE_UNAVAILABLE = 900000001\n\
int64 LONGITUDE_UNAVAILABLE = 1800000001\n\
\n\
================================================================================\n\
MSG: etsi_msgs/PositionConfidenceEllipse\n\
uint16 semi_major_confidence # cm\n\
uint16 semi_minor_confidence # cm\n\
uint16 semi_major_orientation # 0.1 degree\n\
\n\
uint16 SEMI_AXIS_LENGTH_OUT_OF_RANGE = 4094\n\
uint16 SEMI_AXIS_LENGTH_UNAVAILABLE = 4095\n\
\n\
================================================================================\n\
MSG: etsi_msgs/Altitude\n\
int32 value # 0.01 meter\n\
uint8 confidence\n\
\n\
int32 VALUE_REFERENCE_ELLIPSOID_SURFACE = 0\n\
int32 VALUE_ONE_CENTIMETER = 1\n\
int32 VALUE_UNAVAILABLE = 800001\n\
\n\
uint8 CONFIDENCE_1CM = 0\n\
uint8 CONFIDENCE_2CM = 1\n\
uint8 CONFIDENCE_5CM = 2\n\
uint8 CONFIDENCE_10CM = 3\n\
uint8 CONFIDENCE_20CM = 4\n\
uint8 CONFIDENCE_50CM = 5\n\
uint8 CONFIDENCE_1M = 6\n\
uint8 CONFIDENCE_2M = 7\n\
uint8 CONFIDENCE_5M = 8\n\
uint8 CONFIDENCE_10M = 9\n\
uint8 CONFIDENCE_20M = 10\n\
uint8 CONFIDENCE_50M = 11\n\
uint8 CONFIDENCE_100M = 12\n\
uint8 CONFIDENCE_200M = 13\n\
uint8 CONFIDENCE_OUT_OF_RANGE = 14\n\
uint8 CONFIDENCE_UNAVAILABLE = 15\n\
\n\
================================================================================\n\
MSG: etsi_msgs/RelevanceDistance\n\
uint8 value\n\
\n\
uint8 LESS_THAN_50M = 0\n\
uint8 LESS_THAN_100M = 1\n\
uint8 LESS_THAN_200M = 2\n\
uint8 LESS_THAN_500M = 3\n\
uint8 LESS_THAN_1000M = 4\n\
uint8 LESS_THAN_5KM = 5\n\
uint8 LESS_THAN_10KM = 6\n\
uint8 OVER_10KM = 7\n\
uint8 UNAVAILABLE = 255\n\
\n\
================================================================================\n\
MSG: etsi_msgs/RelevanceTrafficDirection\n\
uint8 value\n\
\n\
uint8 ALL_TRAFFIC_DIRECTIONS = 0\n\
uint8 UPSTREAM_TRAFFIC = 1\n\
uint8 DOWNSTREAM_TRAFFIC = 2\n\
uint8 OPPOSITE_TRAFFIC = 3\n\
uint8 UNAVAILABLE = 255 # extension to encode optional traffic directions\n\
\n\
================================================================================\n\
MSG: etsi_msgs/StationType\n\
uint8 value\n\
\n\
uint8 UNKNOWN = 0\n\
uint8 PEDESTRIAN = 1\n\
uint8 CYCLIST = 2\n\
uint8 MOPED = 3\n\
uint8 MOTORCYCLE = 4\n\
uint8 PASSENGER_CAR = 5\n\
uint8 BUS = 6\n\
uint8 LIGHT_TRUCK = 7\n\
uint8 HEAVY_TRUCK = 8\n\
uint8 TRAILER = 9\n\
uint8 SPECIAL_VEHICLE = 10\n\
uint8 TRAM = 11\n\
uint8 ROAD_SIDE_UNIT = 15\n\
";
  }

  static const char* value(const ::etsi_msgs::ManagementContainer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

#ifdef ETSI_MSGS_MESSAGE_MANAGEMENTCONTAINER_PLUGIN_SERIALIZER
  ETSI_MSGS_MESSAGE_MANAGEMENTCONTAINER_PLUGIN_SERIALIZER
#else
  template<class ContainerAllocator> struct Serializer< ::etsi_msgs::ManagementContainer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_id);
      stream.next(m.detection_time);
      stream.next(m.reference_time);
      stream.next(m.termination);
      stream.next(m.event_position);
      stream.next(m.relevance_distance);
      stream.next(m.relevance_traffic_direction);
      stream.next(m.validity_duration);
      stream.next(m.transmission_interval);
      stream.next(m.station_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManagementContainer_
#endif

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

#ifdef ETSI_MSGS_MESSAGE_MANAGEMENTCONTAINER_PLUGIN_PRINTER
  ETSI_MSGS_MESSAGE_MANAGEMENTCONTAINER_PLUGIN_PRINTER
#else
template<class ContainerAllocator>
struct Printer< ::etsi_msgs::ManagementContainer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::etsi_msgs::ManagementContainer_<ContainerAllocator>& v)
  {
    s << indent << "action_id: ";
    s << std::endl;
    Printer< ::etsi_msgs::ActionID_<ContainerAllocator> >::stream(s, indent + "  ", v.action_id);
    s << indent << "detection_time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.detection_time);
    s << indent << "reference_time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.reference_time);
    s << indent << "termination: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.termination);
    s << indent << "event_position: ";
    s << std::endl;
    Printer< ::etsi_msgs::ReferencePosition_<ContainerAllocator> >::stream(s, indent + "  ", v.event_position);
    s << indent << "relevance_distance: ";
    s << std::endl;
    Printer< ::etsi_msgs::RelevanceDistance_<ContainerAllocator> >::stream(s, indent + "  ", v.relevance_distance);
    s << indent << "relevance_traffic_direction: ";
    s << std::endl;
    Printer< ::etsi_msgs::RelevanceTrafficDirection_<ContainerAllocator> >::stream(s, indent + "  ", v.relevance_traffic_direction);
    s << indent << "validity_duration: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.validity_duration);
    s << indent << "transmission_interval: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.transmission_interval);
    s << indent << "station_type: ";
    s << std::endl;
    Printer< ::etsi_msgs::StationType_<ContainerAllocator> >::stream(s, indent + "  ", v.station_type);
  }
};
#endif

} // namespace message_operations
} // namespace ros

#endif // ETSI_MSGS_MESSAGE_MANAGEMENTCONTAINER_H
