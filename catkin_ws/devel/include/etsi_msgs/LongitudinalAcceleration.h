// Generated by gencpp from file etsi_msgs/LongitudinalAcceleration.msg
// DO NOT EDIT!


#ifndef ETSI_MSGS_MESSAGE_LONGITUDINALACCELERATION_H
#define ETSI_MSGS_MESSAGE_LONGITUDINALACCELERATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <etsi_msgs/plugin/LongitudinalAcceleration.h>

namespace etsi_msgs
{
template <class ContainerAllocator>
struct LongitudinalAcceleration_
{
  typedef LongitudinalAcceleration_<ContainerAllocator> Type;

#ifdef ETSI_MSGS_MESSAGE_LONGITUDINALACCELERATION_PLUGIN_CONSTRUCTOR
  ETSI_MSGS_MESSAGE_LONGITUDINALACCELERATION_PLUGIN_CONSTRUCTOR
#else
  LongitudinalAcceleration_()
    : value(0)
    , confidence(0)  {
    }
  LongitudinalAcceleration_(const ContainerAllocator& _alloc)
    : value(0)
    , confidence(0)  {
  (void)_alloc;
    }

#endif


   typedef int16_t _value_type;
  _value_type value;

   typedef uint8_t _confidence_type;
  _confidence_type confidence;



  enum {
    VALUE_UNAVAILABLE = 161,
    CONFIDENCE_OUT_OF_RANGE = 101u,
    CONFIDENCE_UNAVAILABLE = 102u,
  };


  typedef boost::shared_ptr< ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator> const> ConstPtr;

#ifdef ETSI_MSGS_MESSAGE_LONGITUDINALACCELERATION_PLUGIN_CLASS_BODY
  ETSI_MSGS_MESSAGE_LONGITUDINALACCELERATION_PLUGIN_CLASS_BODY
#endif
}; // struct LongitudinalAcceleration_

typedef ::etsi_msgs::LongitudinalAcceleration_<std::allocator<void> > LongitudinalAcceleration;

typedef boost::shared_ptr< ::etsi_msgs::LongitudinalAcceleration > LongitudinalAccelerationPtr;
typedef boost::shared_ptr< ::etsi_msgs::LongitudinalAcceleration const> LongitudinalAccelerationConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace etsi_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'etsi_msgs': ['/home/ppe2021/catkin_ws/src/etsi_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1817cb5901a9c214183a59333522d9fb";
  }

  static const char* value(const ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1817cb5901a9c214ULL;
  static const uint64_t static_value2 = 0x183a59333522d9fbULL;
};

template<class ContainerAllocator>
struct DataType< ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "etsi_msgs/LongitudinalAcceleration";
  }

  static const char* value(const ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 value # 0.1 m/s^2\n\
uint8 confidence # 0.1 m/s^2\n\
\n\
int16 VALUE_UNAVAILABLE = 161\n\
\n\
uint8 CONFIDENCE_OUT_OF_RANGE = 101\n\
uint8 CONFIDENCE_UNAVAILABLE = 102\n\
";
  }

  static const char* value(const ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

#ifdef ETSI_MSGS_MESSAGE_LONGITUDINALACCELERATION_PLUGIN_SERIALIZER
  ETSI_MSGS_MESSAGE_LONGITUDINALACCELERATION_PLUGIN_SERIALIZER
#else
  template<class ContainerAllocator> struct Serializer< ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LongitudinalAcceleration_
#endif

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

#ifdef ETSI_MSGS_MESSAGE_LONGITUDINALACCELERATION_PLUGIN_PRINTER
  ETSI_MSGS_MESSAGE_LONGITUDINALACCELERATION_PLUGIN_PRINTER
#else
template<class ContainerAllocator>
struct Printer< ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::etsi_msgs::LongitudinalAcceleration_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<int16_t>::stream(s, indent + "  ", v.value);
    s << indent << "confidence: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.confidence);
  }
};
#endif

} // namespace message_operations
} // namespace ros

#endif // ETSI_MSGS_MESSAGE_LONGITUDINALACCELERATION_H
