// Generated by gencpp from file etsi_msgs/DENM.msg
// DO NOT EDIT!


#ifndef ETSI_MSGS_MESSAGE_DENM_H
#define ETSI_MSGS_MESSAGE_DENM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <etsi_msgs/ItsPduHeader.h>
#include <etsi_msgs/ManagementContainer.h>
#include <etsi_msgs/SituationContainer.h>
#include <etsi_msgs/LocationContainer.h>

namespace etsi_msgs
{
template <class ContainerAllocator>
struct DENM_
{
  typedef DENM_<ContainerAllocator> Type;

  DENM_()
    : header()
    , its_header()
    , management()
    , has_situation(false)
    , situation()
    , has_location(false)
    , location()  {
    }
  DENM_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , its_header(_alloc)
    , management(_alloc)
    , has_situation(false)
    , situation(_alloc)
    , has_location(false)
    , location(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::etsi_msgs::ItsPduHeader_<ContainerAllocator>  _its_header_type;
  _its_header_type its_header;

   typedef  ::etsi_msgs::ManagementContainer_<ContainerAllocator>  _management_type;
  _management_type management;

   typedef uint8_t _has_situation_type;
  _has_situation_type has_situation;

   typedef  ::etsi_msgs::SituationContainer_<ContainerAllocator>  _situation_type;
  _situation_type situation;

   typedef uint8_t _has_location_type;
  _has_location_type has_location;

   typedef  ::etsi_msgs::LocationContainer_<ContainerAllocator>  _location_type;
  _location_type location;





  typedef boost::shared_ptr< ::etsi_msgs::DENM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::etsi_msgs::DENM_<ContainerAllocator> const> ConstPtr;

}; // struct DENM_

typedef ::etsi_msgs::DENM_<std::allocator<void> > DENM;

typedef boost::shared_ptr< ::etsi_msgs::DENM > DENMPtr;
typedef boost::shared_ptr< ::etsi_msgs::DENM const> DENMConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::etsi_msgs::DENM_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::etsi_msgs::DENM_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace etsi_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'etsi_msgs': ['/home/ppe2021/catkin_ws/src/etsi_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::etsi_msgs::DENM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::etsi_msgs::DENM_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etsi_msgs::DENM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etsi_msgs::DENM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etsi_msgs::DENM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etsi_msgs::DENM_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::etsi_msgs::DENM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66d74b1f24152abbfb60e3e0a2c36bfb";
  }

  static const char* value(const ::etsi_msgs::DENM_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66d74b1f24152abbULL;
  static const uint64_t static_value2 = 0xfb60e3e0a2c36bfbULL;
};

template<class ContainerAllocator>
struct DataType< ::etsi_msgs::DENM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "etsi_msgs/DENM";
  }

  static const char* value(const ::etsi_msgs::DENM_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::etsi_msgs::DENM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
ItsPduHeader its_header\n\
\n\
ManagementContainer management\n\
\n\
bool has_situation\n\
SituationContainer situation\n\
\n\
bool has_location\n\
LocationContainer location\n\
\n\
# TODO AlacarteContainer is missing\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: etsi_msgs/ItsPduHeader\n\
uint8 protocol_version\n\
uint8 message_id\n\
uint32 station_id\n\
\n\
uint8 MESSAGE_ID_DENM = 1\n\
uint8 MESSAGE_ID_CAM = 2\n\
\n\
================================================================================\n\
MSG: etsi_msgs/ManagementContainer\n\
ActionID action_id\n\
uint64 detection_time # ms since 2004\n\
uint64 reference_time # ms since 2004\n\
uint8 termination\n\
ReferencePosition event_position\n\
RelevanceDistance relevance_distance\n\
RelevanceTrafficDirection relevance_traffic_direction\n\
uint32 validity_duration # seconds\n\
uint32 transmission_interval # milliseconds\n\
StationType station_type\n\
\n\
uint8 TERMINATION_CANCELLATION = 0\n\
uint8 TERMINATION_NEGATION = 1\n\
uint8 TERMINATION_UNAVAILABLE = 255\n\
\n\
uint32 TRANSMISSION_INTERVAL_ONE_MILLISECOND = 1\n\
uint32 TRANSMISSION_INTERVAL_TEN_SECONDS = 10000\n\
uint32 TRANSMISSION_INTERVAL_UNAVAILABLE = 0\n\
\n\
uint32 VALIDITY_DURATION_DEFAULT = 600\n\
uint32 VALIDITY_DURATION_TIME_OF_DETECTION = 0\n\
uint32 VALIDITY_DURATION_ONE_SECOND_AFTER_DETECTION = 1\n\
\n\
================================================================================\n\
MSG: etsi_msgs/ActionID\n\
uint32 station_id\n\
uint16 sequence_number\n\
\n\
================================================================================\n\
MSG: etsi_msgs/ReferencePosition\n\
int64 latitude # 0.1 micro degree\n\
int64 longitude # 0.1 micro degree\n\
PositionConfidenceEllipse position_confidence\n\
Altitude altitude\n\
\n\
int64 LATITUDE_UNAVAILABLE = 900000001\n\
int64 LONGITUDE_UNAVAILABLE = 1800000001\n\
\n\
================================================================================\n\
MSG: etsi_msgs/PositionConfidenceEllipse\n\
uint16 semi_major_confidence # cm\n\
uint16 semi_minor_confidence # cm\n\
uint16 semi_major_orientation # 0.1 degree\n\
\n\
uint16 SEMI_AXIS_LENGTH_OUT_OF_RANGE = 4094\n\
uint16 SEMI_AXIS_LENGTH_UNAVAILABLE = 4095\n\
\n\
================================================================================\n\
MSG: etsi_msgs/Altitude\n\
int32 value # 0.01 meter\n\
uint8 confidence\n\
\n\
int32 VALUE_REFERENCE_ELLIPSOID_SURFACE = 0\n\
int32 VALUE_ONE_CENTIMETER = 1\n\
int32 VALUE_UNAVAILABLE = 800001\n\
\n\
uint8 CONFIDENCE_1CM = 0\n\
uint8 CONFIDENCE_2CM = 1\n\
uint8 CONFIDENCE_5CM = 2\n\
uint8 CONFIDENCE_10CM = 3\n\
uint8 CONFIDENCE_20CM = 4\n\
uint8 CONFIDENCE_50CM = 5\n\
uint8 CONFIDENCE_1M = 6\n\
uint8 CONFIDENCE_2M = 7\n\
uint8 CONFIDENCE_5M = 8\n\
uint8 CONFIDENCE_10M = 9\n\
uint8 CONFIDENCE_20M = 10\n\
uint8 CONFIDENCE_50M = 11\n\
uint8 CONFIDENCE_100M = 12\n\
uint8 CONFIDENCE_200M = 13\n\
uint8 CONFIDENCE_OUT_OF_RANGE = 14\n\
uint8 CONFIDENCE_UNAVAILABLE = 15\n\
\n\
================================================================================\n\
MSG: etsi_msgs/RelevanceDistance\n\
uint8 value\n\
\n\
uint8 LESS_THAN_50M = 0\n\
uint8 LESS_THAN_100M = 1\n\
uint8 LESS_THAN_200M = 2\n\
uint8 LESS_THAN_500M = 3\n\
uint8 LESS_THAN_1000M = 4\n\
uint8 LESS_THAN_5KM = 5\n\
uint8 LESS_THAN_10KM = 6\n\
uint8 OVER_10KM = 7\n\
uint8 UNAVAILABLE = 255\n\
\n\
================================================================================\n\
MSG: etsi_msgs/RelevanceTrafficDirection\n\
uint8 value\n\
\n\
uint8 ALL_TRAFFIC_DIRECTIONS = 0\n\
uint8 UPSTREAM_TRAFFIC = 1\n\
uint8 DOWNSTREAM_TRAFFIC = 2\n\
uint8 OPPOSITE_TRAFFIC = 3\n\
uint8 UNAVAILABLE = 255 # extension to encode optional traffic directions\n\
\n\
================================================================================\n\
MSG: etsi_msgs/StationType\n\
uint8 value\n\
\n\
uint8 UNKNOWN = 0\n\
uint8 PEDESTRIAN = 1\n\
uint8 CYCLIST = 2\n\
uint8 MOPED = 3\n\
uint8 MOTORCYCLE = 4\n\
uint8 PASSENGER_CAR = 5\n\
uint8 BUS = 6\n\
uint8 LIGHT_TRUCK = 7\n\
uint8 HEAVY_TRUCK = 8\n\
uint8 TRAILER = 9\n\
uint8 SPECIAL_VEHICLE = 10\n\
uint8 TRAM = 11\n\
uint8 ROAD_SIDE_UNIT = 15\n\
\n\
================================================================================\n\
MSG: etsi_msgs/SituationContainer\n\
InformationQuality information_quality\n\
CauseCode event_type\n\
bool has_linked_cause\n\
CauseCode linked_cause\n\
EventPoint[] event_history\n\
\n\
================================================================================\n\
MSG: etsi_msgs/InformationQuality\n\
int8 value\n\
\n\
int8 UNAVAILABLE = 0\n\
int8 LOWEST = 1\n\
int8 HIGHEST = 7\n\
\n\
================================================================================\n\
MSG: etsi_msgs/CauseCode\n\
uint8 cause_code\n\
uint8 sub_cause_code\n\
\n\
uint8 RESERVED = 0\n\
uint8 TRAFFIC_CONDITION = 1\n\
uint8 ACCIDENT = 2\n\
uint8 ROADWORKS = 3\n\
uint8 ADVERSE_WEATHER_CONDITIONS_ADHESION = 4\n\
uint8 HAZARDOUS_LOCATION_SURFACE_CONDITION = 9\n\
uint8 HAZARDOUS_LOCATION_OBSTACLE_ON_THE_ROAD = 10\n\
uint8 HAZARDOUS_LOCATION_ANIMAL_ON_THE_ROAD = 11\n\
uint8 HUMAN_PRESENCE_ON_THE_ROAD = 12\n\
uint8 WRONG_WAY_DRIVING = 14\n\
uint8 RESCUE_AND_RECOVERY_WORK_IN_PROGRESS = 15\n\
uint8 ADVERSE_WEATHER_CONDITIONS_EXTREME_WEATHER_CONDITION = 17\n\
uint8 ADVERSE_WEATHER_CONDITIONS_VISIBILITY = 18\n\
uint8 ADVERSE_WEATHER_CONDITIONS_PRECIPITATION = 19\n\
uint8 SLOW_VEHICLE = 26\n\
uint8 DANGEROUS_END_OF_QUEUE = 27\n\
uint8 VEHICLE_BREAKDOWN = 91\n\
uint8 POST_CRASH = 92\n\
uint8 HUMAN_PROBLEM = 93\n\
uint8 STATIONARY_VEHICLE = 94\n\
uint8 EMERGENCY_VEHICLE_APPROACHING = 95\n\
uint8 HAZARDOUS_LOCATION_DANGEROUS_CURVE = 96\n\
uint8 COLLISION_RISK = 97\n\
uint8 SIGNAL_VIOLATION = 98\n\
uint8 DANGEROUS_SITUATION = 99\n\
\n\
================================================================================\n\
MSG: etsi_msgs/EventPoint\n\
DeltaReferencePosition event_position\n\
PathDeltaTime event_delta_time\n\
InformationQuality information_quality\n\
\n\
================================================================================\n\
MSG: etsi_msgs/DeltaReferencePosition\n\
int32 delta_latitude # 0.1 micro degree\n\
int32 delta_longitude # 0.1 micro degree\n\
int16 delta_altitude # centimeter\n\
\n\
int32 ONE_MICRODEGREE_NORTH = 10\n\
int32 ONE_MICRODEGREE_SOUTH = -10\n\
int32 ONE_MICRODEGREE_EAST = 10\n\
int32 ONE_MICRODEGREE_WEST = -10\n\
int32 ONE_CENTIMETER_UP = 1\n\
int32 ONE_CENTIMETER_DOWN = -1\n\
int32 LATITUDE_UNAVAILABLE = 131072\n\
int32 LONGITUDE_UNAVAILABLE = 131072\n\
int16 ALTITUDE_UNAVAILABLE = 12800\n\
\n\
================================================================================\n\
MSG: etsi_msgs/PathDeltaTime\n\
uint16 value # 10 ms\n\
\n\
uint16 UNAVAILABLE = 0\n\
uint16 TEN_MILLISECONDS_IN_PAST = 1\n\
\n\
================================================================================\n\
MSG: etsi_msgs/LocationContainer\n\
Speed event_speed\n\
Heading event_position_heading\n\
PathHistory[] traces\n\
uint8 road_type\n\
\n\
uint8 ROAD_TYPE_URBAN_NO_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 0\n\
uint8 ROAD_TYPE_URBAN_WITH_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 1\n\
uint8 ROAD_TYPE_NON_URBAN_NO_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 2\n\
uint8 ROAD_TYPE_NON_URBAN_WITH_STRUCTURAL_SEPARATION_TO_OPPOSITE_LANES = 3\n\
uint8 ROAD_TYPE_UNAVAILABLE = 255\n\
\n\
================================================================================\n\
MSG: etsi_msgs/Speed\n\
uint16 value # 0.01 m/s\n\
uint8 confidence # 0.01 m/s\n\
\n\
uint16 VALUE_STANDSTILL = 0\n\
uint16 VALUE_ONE_CENTIMETER_PER_SECOND = 1\n\
uint16 VALUE_UNAVAILABLE = 16383\n\
\n\
uint8 CONFIDENCE_OUT_OF_RANGE = 126\n\
uint8 CONFIDENCE_UNAVAILABLE = 127\n\
\n\
================================================================================\n\
MSG: etsi_msgs/Heading\n\
uint16 value # 0.1 degree\n\
uint8 confidence\n\
\n\
uint16 VALUE_NORTH = 0\n\
uint16 VALUE_EAST = 900\n\
uint16 VALUE_SOUTH = 1800\n\
uint16 VALUE_WEST = 2700\n\
uint16 VALUE_UNAVAILABLE = 3601\n\
\n\
uint8 CONFIDENCE_ZERO_POINT_ONE_DEGREE = 1\n\
uint8 CONFIDENCE_ONE_DEGREE = 10\n\
uint8 CONFIDENCE_OUT_OF_RANGE = 126\n\
uint8 CONFIDENCE_UNAVAILABLE = 127\n\
\n\
================================================================================\n\
MSG: etsi_msgs/PathHistory\n\
PathPoint[] points\n\
\n\
================================================================================\n\
MSG: etsi_msgs/PathPoint\n\
DeltaReferencePosition path_position\n\
PathDeltaTime path_delta_time\n\
";
  }

  static const char* value(const ::etsi_msgs::DENM_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::etsi_msgs::DENM_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.its_header);
      stream.next(m.management);
      stream.next(m.has_situation);
      stream.next(m.situation);
      stream.next(m.has_location);
      stream.next(m.location);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DENM_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::etsi_msgs::DENM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::etsi_msgs::DENM_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "its_header: ";
    s << std::endl;
    Printer< ::etsi_msgs::ItsPduHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.its_header);
    s << indent << "management: ";
    s << std::endl;
    Printer< ::etsi_msgs::ManagementContainer_<ContainerAllocator> >::stream(s, indent + "  ", v.management);
    s << indent << "has_situation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_situation);
    s << indent << "situation: ";
    s << std::endl;
    Printer< ::etsi_msgs::SituationContainer_<ContainerAllocator> >::stream(s, indent + "  ", v.situation);
    s << indent << "has_location: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_location);
    s << indent << "location: ";
    s << std::endl;
    Printer< ::etsi_msgs::LocationContainer_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ETSI_MSGS_MESSAGE_DENM_H
