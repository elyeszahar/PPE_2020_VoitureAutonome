// Generated by gencpp from file etsi_msgs/CauseCode.msg
// DO NOT EDIT!


#ifndef ETSI_MSGS_MESSAGE_CAUSECODE_H
#define ETSI_MSGS_MESSAGE_CAUSECODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace etsi_msgs
{
template <class ContainerAllocator>
struct CauseCode_
{
  typedef CauseCode_<ContainerAllocator> Type;

  CauseCode_()
    : cause_code(0)
    , sub_cause_code(0)  {
    }
  CauseCode_(const ContainerAllocator& _alloc)
    : cause_code(0)
    , sub_cause_code(0)  {
  (void)_alloc;
    }



   typedef uint8_t _cause_code_type;
  _cause_code_type cause_code;

   typedef uint8_t _sub_cause_code_type;
  _sub_cause_code_type sub_cause_code;



  enum {
    RESERVED = 0u,
    TRAFFIC_CONDITION = 1u,
    ACCIDENT = 2u,
    ROADWORKS = 3u,
    ADVERSE_WEATHER_CONDITIONS_ADHESION = 4u,
    HAZARDOUS_LOCATION_SURFACE_CONDITION = 9u,
    HAZARDOUS_LOCATION_OBSTACLE_ON_THE_ROAD = 10u,
    HAZARDOUS_LOCATION_ANIMAL_ON_THE_ROAD = 11u,
    HUMAN_PRESENCE_ON_THE_ROAD = 12u,
    WRONG_WAY_DRIVING = 14u,
    RESCUE_AND_RECOVERY_WORK_IN_PROGRESS = 15u,
    ADVERSE_WEATHER_CONDITIONS_EXTREME_WEATHER_CONDITION = 17u,
    ADVERSE_WEATHER_CONDITIONS_VISIBILITY = 18u,
    ADVERSE_WEATHER_CONDITIONS_PRECIPITATION = 19u,
    SLOW_VEHICLE = 26u,
    DANGEROUS_END_OF_QUEUE = 27u,
    VEHICLE_BREAKDOWN = 91u,
    POST_CRASH = 92u,
    HUMAN_PROBLEM = 93u,
    STATIONARY_VEHICLE = 94u,
    EMERGENCY_VEHICLE_APPROACHING = 95u,
    HAZARDOUS_LOCATION_DANGEROUS_CURVE = 96u,
    COLLISION_RISK = 97u,
    SIGNAL_VIOLATION = 98u,
    DANGEROUS_SITUATION = 99u,
  };


  typedef boost::shared_ptr< ::etsi_msgs::CauseCode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::etsi_msgs::CauseCode_<ContainerAllocator> const> ConstPtr;

}; // struct CauseCode_

typedef ::etsi_msgs::CauseCode_<std::allocator<void> > CauseCode;

typedef boost::shared_ptr< ::etsi_msgs::CauseCode > CauseCodePtr;
typedef boost::shared_ptr< ::etsi_msgs::CauseCode const> CauseCodeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::etsi_msgs::CauseCode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::etsi_msgs::CauseCode_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace etsi_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'etsi_msgs': ['/home/ppe2021/catkin_ws/src/etsi_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::etsi_msgs::CauseCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::etsi_msgs::CauseCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etsi_msgs::CauseCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etsi_msgs::CauseCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etsi_msgs::CauseCode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etsi_msgs::CauseCode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::etsi_msgs::CauseCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc8877aef6cd5537c1ab4131c260e325";
  }

  static const char* value(const ::etsi_msgs::CauseCode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc8877aef6cd5537ULL;
  static const uint64_t static_value2 = 0xc1ab4131c260e325ULL;
};

template<class ContainerAllocator>
struct DataType< ::etsi_msgs::CauseCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "etsi_msgs/CauseCode";
  }

  static const char* value(const ::etsi_msgs::CauseCode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::etsi_msgs::CauseCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 cause_code\n\
uint8 sub_cause_code\n\
\n\
uint8 RESERVED = 0\n\
uint8 TRAFFIC_CONDITION = 1\n\
uint8 ACCIDENT = 2\n\
uint8 ROADWORKS = 3\n\
uint8 ADVERSE_WEATHER_CONDITIONS_ADHESION = 4\n\
uint8 HAZARDOUS_LOCATION_SURFACE_CONDITION = 9\n\
uint8 HAZARDOUS_LOCATION_OBSTACLE_ON_THE_ROAD = 10\n\
uint8 HAZARDOUS_LOCATION_ANIMAL_ON_THE_ROAD = 11\n\
uint8 HUMAN_PRESENCE_ON_THE_ROAD = 12\n\
uint8 WRONG_WAY_DRIVING = 14\n\
uint8 RESCUE_AND_RECOVERY_WORK_IN_PROGRESS = 15\n\
uint8 ADVERSE_WEATHER_CONDITIONS_EXTREME_WEATHER_CONDITION = 17\n\
uint8 ADVERSE_WEATHER_CONDITIONS_VISIBILITY = 18\n\
uint8 ADVERSE_WEATHER_CONDITIONS_PRECIPITATION = 19\n\
uint8 SLOW_VEHICLE = 26\n\
uint8 DANGEROUS_END_OF_QUEUE = 27\n\
uint8 VEHICLE_BREAKDOWN = 91\n\
uint8 POST_CRASH = 92\n\
uint8 HUMAN_PROBLEM = 93\n\
uint8 STATIONARY_VEHICLE = 94\n\
uint8 EMERGENCY_VEHICLE_APPROACHING = 95\n\
uint8 HAZARDOUS_LOCATION_DANGEROUS_CURVE = 96\n\
uint8 COLLISION_RISK = 97\n\
uint8 SIGNAL_VIOLATION = 98\n\
uint8 DANGEROUS_SITUATION = 99\n\
";
  }

  static const char* value(const ::etsi_msgs::CauseCode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::etsi_msgs::CauseCode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cause_code);
      stream.next(m.sub_cause_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CauseCode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::etsi_msgs::CauseCode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::etsi_msgs::CauseCode_<ContainerAllocator>& v)
  {
    s << indent << "cause_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cause_code);
    s << indent << "sub_cause_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sub_cause_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ETSI_MSGS_MESSAGE_CAUSECODE_H
