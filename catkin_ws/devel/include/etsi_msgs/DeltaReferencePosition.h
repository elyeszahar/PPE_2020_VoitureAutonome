// Generated by gencpp from file etsi_msgs/DeltaReferencePosition.msg
// DO NOT EDIT!


#ifndef ETSI_MSGS_MESSAGE_DELTAREFERENCEPOSITION_H
#define ETSI_MSGS_MESSAGE_DELTAREFERENCEPOSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <etsi_msgs/plugin/DeltaReferencePosition.h>

namespace etsi_msgs
{
template <class ContainerAllocator>
struct DeltaReferencePosition_
{
  typedef DeltaReferencePosition_<ContainerAllocator> Type;

#ifdef ETSI_MSGS_MESSAGE_DELTAREFERENCEPOSITION_PLUGIN_CONSTRUCTOR
  ETSI_MSGS_MESSAGE_DELTAREFERENCEPOSITION_PLUGIN_CONSTRUCTOR
#else
  DeltaReferencePosition_()
    : delta_latitude(0)
    , delta_longitude(0)
    , delta_altitude(0)  {
    }
  DeltaReferencePosition_(const ContainerAllocator& _alloc)
    : delta_latitude(0)
    , delta_longitude(0)
    , delta_altitude(0)  {
  (void)_alloc;
    }

#endif


   typedef int32_t _delta_latitude_type;
  _delta_latitude_type delta_latitude;

   typedef int32_t _delta_longitude_type;
  _delta_longitude_type delta_longitude;

   typedef int16_t _delta_altitude_type;
  _delta_altitude_type delta_altitude;



  enum {
    ONE_MICRODEGREE_NORTH = 10,
    ONE_MICRODEGREE_SOUTH = -10,
    ONE_MICRODEGREE_EAST = 10,
    ONE_MICRODEGREE_WEST = -10,
    ONE_CENTIMETER_UP = 1,
    ONE_CENTIMETER_DOWN = -1,
    LATITUDE_UNAVAILABLE = 131072,
    LONGITUDE_UNAVAILABLE = 131072,
    ALTITUDE_UNAVAILABLE = 12800,
  };


  typedef boost::shared_ptr< ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator> const> ConstPtr;

#ifdef ETSI_MSGS_MESSAGE_DELTAREFERENCEPOSITION_PLUGIN_CLASS_BODY
  ETSI_MSGS_MESSAGE_DELTAREFERENCEPOSITION_PLUGIN_CLASS_BODY
#endif
}; // struct DeltaReferencePosition_

typedef ::etsi_msgs::DeltaReferencePosition_<std::allocator<void> > DeltaReferencePosition;

typedef boost::shared_ptr< ::etsi_msgs::DeltaReferencePosition > DeltaReferencePositionPtr;
typedef boost::shared_ptr< ::etsi_msgs::DeltaReferencePosition const> DeltaReferencePositionConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace etsi_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'etsi_msgs': ['/home/ppe2021/catkin_ws/src/etsi_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b49a8a9b72b511ff5a77cf9b108e1e3";
  }

  static const char* value(const ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b49a8a9b72b511fULL;
  static const uint64_t static_value2 = 0xf5a77cf9b108e1e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "etsi_msgs/DeltaReferencePosition";
  }

  static const char* value(const ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 delta_latitude # 0.1 micro degree\n\
int32 delta_longitude # 0.1 micro degree\n\
int16 delta_altitude # centimeter\n\
\n\
int32 ONE_MICRODEGREE_NORTH = 10\n\
int32 ONE_MICRODEGREE_SOUTH = -10\n\
int32 ONE_MICRODEGREE_EAST = 10\n\
int32 ONE_MICRODEGREE_WEST = -10\n\
int32 ONE_CENTIMETER_UP = 1\n\
int32 ONE_CENTIMETER_DOWN = -1\n\
int32 LATITUDE_UNAVAILABLE = 131072\n\
int32 LONGITUDE_UNAVAILABLE = 131072\n\
int16 ALTITUDE_UNAVAILABLE = 12800\n\
";
  }

  static const char* value(const ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

#ifdef ETSI_MSGS_MESSAGE_DELTAREFERENCEPOSITION_PLUGIN_SERIALIZER
  ETSI_MSGS_MESSAGE_DELTAREFERENCEPOSITION_PLUGIN_SERIALIZER
#else
  template<class ContainerAllocator> struct Serializer< ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.delta_latitude);
      stream.next(m.delta_longitude);
      stream.next(m.delta_altitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DeltaReferencePosition_
#endif

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

#ifdef ETSI_MSGS_MESSAGE_DELTAREFERENCEPOSITION_PLUGIN_PRINTER
  ETSI_MSGS_MESSAGE_DELTAREFERENCEPOSITION_PLUGIN_PRINTER
#else
template<class ContainerAllocator>
struct Printer< ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::etsi_msgs::DeltaReferencePosition_<ContainerAllocator>& v)
  {
    s << indent << "delta_latitude: ";
    Printer<int32_t>::stream(s, indent + "  ", v.delta_latitude);
    s << indent << "delta_longitude: ";
    Printer<int32_t>::stream(s, indent + "  ", v.delta_longitude);
    s << indent << "delta_altitude: ";
    Printer<int16_t>::stream(s, indent + "  ", v.delta_altitude);
  }
};
#endif

} // namespace message_operations
} // namespace ros

#endif // ETSI_MSGS_MESSAGE_DELTAREFERENCEPOSITION_H
