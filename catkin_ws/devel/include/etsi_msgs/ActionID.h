// Generated by gencpp from file etsi_msgs/ActionID.msg
// DO NOT EDIT!


#ifndef ETSI_MSGS_MESSAGE_ACTIONID_H
#define ETSI_MSGS_MESSAGE_ACTIONID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace etsi_msgs
{
template <class ContainerAllocator>
struct ActionID_
{
  typedef ActionID_<ContainerAllocator> Type;

  ActionID_()
    : station_id(0)
    , sequence_number(0)  {
    }
  ActionID_(const ContainerAllocator& _alloc)
    : station_id(0)
    , sequence_number(0)  {
  (void)_alloc;
    }



   typedef uint32_t _station_id_type;
  _station_id_type station_id;

   typedef uint16_t _sequence_number_type;
  _sequence_number_type sequence_number;





  typedef boost::shared_ptr< ::etsi_msgs::ActionID_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::etsi_msgs::ActionID_<ContainerAllocator> const> ConstPtr;

}; // struct ActionID_

typedef ::etsi_msgs::ActionID_<std::allocator<void> > ActionID;

typedef boost::shared_ptr< ::etsi_msgs::ActionID > ActionIDPtr;
typedef boost::shared_ptr< ::etsi_msgs::ActionID const> ActionIDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::etsi_msgs::ActionID_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::etsi_msgs::ActionID_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace etsi_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'etsi_msgs': ['/home/ppe2021/catkin_ws/src/etsi_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::etsi_msgs::ActionID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::etsi_msgs::ActionID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etsi_msgs::ActionID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::etsi_msgs::ActionID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etsi_msgs::ActionID_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::etsi_msgs::ActionID_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::etsi_msgs::ActionID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "11aa5c3558afdafb4f3a2fc76d0b6ed8";
  }

  static const char* value(const ::etsi_msgs::ActionID_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x11aa5c3558afdafbULL;
  static const uint64_t static_value2 = 0x4f3a2fc76d0b6ed8ULL;
};

template<class ContainerAllocator>
struct DataType< ::etsi_msgs::ActionID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "etsi_msgs/ActionID";
  }

  static const char* value(const ::etsi_msgs::ActionID_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::etsi_msgs::ActionID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 station_id\n\
uint16 sequence_number\n\
";
  }

  static const char* value(const ::etsi_msgs::ActionID_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::etsi_msgs::ActionID_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.station_id);
      stream.next(m.sequence_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionID_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::etsi_msgs::ActionID_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::etsi_msgs::ActionID_<ContainerAllocator>& v)
  {
    s << indent << "station_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.station_id);
    s << indent << "sequence_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.sequence_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ETSI_MSGS_MESSAGE_ACTIONID_H
