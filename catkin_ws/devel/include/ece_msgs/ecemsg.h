// Generated by gencpp from file ece_msgs/ecemsg.msg
// DO NOT EDIT!


#ifndef ECE_MSGS_MESSAGE_ECEMSG_H
#define ECE_MSGS_MESSAGE_ECEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ece_msgs/ItsPduHeader.h>
#include <ece_msgs/BasicContainer.h>
#include <ece_msgs/Init.h>
#include <ece_msgs/Insertion.h>
#include <ece_msgs/Desinsertion.h>
#include <ece_msgs/FreinageUrgence.h>
#include <ece_msgs/Feu.h>

namespace ece_msgs
{
template <class ContainerAllocator>
struct ecemsg_
{
  typedef ecemsg_<ContainerAllocator> Type;

  ecemsg_()
    : header()
    , its_header()
    , generation_delta_time(0)
    , basic_container()
    , init()
    , insertion()
    , desinsertion()
    , freinage_urgence()
    , feu()  {
    }
  ecemsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , its_header(_alloc)
    , generation_delta_time(0)
    , basic_container(_alloc)
    , init(_alloc)
    , insertion(_alloc)
    , desinsertion(_alloc)
    , freinage_urgence(_alloc)
    , feu(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ece_msgs::ItsPduHeader_<ContainerAllocator>  _its_header_type;
  _its_header_type its_header;

   typedef uint16_t _generation_delta_time_type;
  _generation_delta_time_type generation_delta_time;

   typedef  ::ece_msgs::BasicContainer_<ContainerAllocator>  _basic_container_type;
  _basic_container_type basic_container;

   typedef  ::ece_msgs::Init_<ContainerAllocator>  _init_type;
  _init_type init;

   typedef  ::ece_msgs::Insertion_<ContainerAllocator>  _insertion_type;
  _insertion_type insertion;

   typedef  ::ece_msgs::Desinsertion_<ContainerAllocator>  _desinsertion_type;
  _desinsertion_type desinsertion;

   typedef  ::ece_msgs::FreinageUrgence_<ContainerAllocator>  _freinage_urgence_type;
  _freinage_urgence_type freinage_urgence;

   typedef  ::ece_msgs::Feu_<ContainerAllocator>  _feu_type;
  _feu_type feu;





  typedef boost::shared_ptr< ::ece_msgs::ecemsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ece_msgs::ecemsg_<ContainerAllocator> const> ConstPtr;

}; // struct ecemsg_

typedef ::ece_msgs::ecemsg_<std::allocator<void> > ecemsg;

typedef boost::shared_ptr< ::ece_msgs::ecemsg > ecemsgPtr;
typedef boost::shared_ptr< ::ece_msgs::ecemsg const> ecemsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ece_msgs::ecemsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ece_msgs::ecemsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ece_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ece_msgs': ['/home/ppe2021/catkin_ws/src/ece_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ece_msgs::ecemsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ece_msgs::ecemsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ece_msgs::ecemsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ece_msgs::ecemsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ece_msgs::ecemsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ece_msgs::ecemsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ece_msgs::ecemsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7ee37b09982376135f3ec683dcb0f358";
  }

  static const char* value(const ::ece_msgs::ecemsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7ee37b0998237613ULL;
  static const uint64_t static_value2 = 0x5f3ec683dcb0f358ULL;
};

template<class ContainerAllocator>
struct DataType< ::ece_msgs::ecemsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ece_msgs/ecemsg";
  }

  static const char* value(const ::ece_msgs::ecemsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ece_msgs::ecemsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
ItsPduHeader its_header\n\
uint16 generation_delta_time # milliseconds since 2004 modulo 2^16\n\
\n\
# basic container\n\
BasicContainer basic_container\n\
\n\
# Init\n\
Init init\n\
\n\
# Insertion\n\
Insertion insertion\n\
\n\
# Desinsertion\n\
Desinsertion desinsertion \n\
\n\
# Freinage d'urgence\n\
FreinageUrgence freinage_urgence\n\
\n\
# Feu\n\
Feu feu\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ece_msgs/ItsPduHeader\n\
uint8 protocol_version\n\
uint8 message_id\n\
uint32 station_id\n\
\n\
uint8 MESSAGE_ID_DENM = 1\n\
uint8 MESSAGE_ID_CAM = 2\n\
uint8 MESSAGE_ID_ECE = 8\n\
================================================================================\n\
MSG: ece_msgs/BasicContainer\n\
# ID expediteur\n\
uint8 ID_exp\n\
\n\
# ID destinataire\n\
uint8 ID_dest\n\
\n\
# Phase de plattoning\n\
Phase phase\n\
\n\
# Type de station\n\
StationType station_type\n\
================================================================================\n\
MSG: ece_msgs/Phase\n\
# Phase de plattoning\n\
uint8 value\n\
\n\
uint8 INIT = 0\n\
uint8 INSERTION = 1\n\
uint8 DESINSERTION = 2\n\
uint8 FEU = 3\n\
uint8 FREINAGE_URG = 4\n\
================================================================================\n\
MSG: ece_msgs/StationType\n\
uint8 value\n\
\n\
uint8 UNKNOWN = 0\n\
uint8 PEDESTRIAN = 1\n\
uint8 CYCLIST = 2\n\
uint8 MOPED = 3\n\
uint8 MOTORCYCLE = 4\n\
uint8 PASSENGER_CAR = 5\n\
uint8 BUS = 6\n\
uint8 LIGHT_TRUCK = 7\n\
uint8 HEAVY_TRUCK = 8\n\
uint8 TRAILER = 9\n\
uint8 SPECIAL_VEHICLE = 10\n\
uint8 TRAM = 11\n\
uint8 ROAD_SIDE_UNIT = 15\n\
================================================================================\n\
MSG: ece_msgs/Init\n\
# Destination : 8 octets\n\
ReferencePosition destination\n\
\n\
# Actual position : 8 octets\n\
ReferencePosition actual_position\n\
\n\
\n\
\n\
================================================================================\n\
MSG: ece_msgs/ReferencePosition\n\
int64 latitude # 0.1 micro degree\n\
int64 longitude # 0.1 micro degree\n\
int32 altitude\n\
\n\
int64 LATITUDE_UNAVAILABLE = 900000001\n\
int64 LONGITUDE_UNAVAILABLE = 1800000001\n\
int32 ALTITUDE_UNAVAILABLE = 800001\n\
\n\
================================================================================\n\
MSG: ece_msgs/Insertion\n\
# Point d'insertion : 8 octet \n\
ReferencePosition point_insertion\n\
\n\
# Confirmation insertion : 1 octet\n\
bool confirmation_insertion\n\
\n\
# Platoon\n\
Platoon platoon\n\
================================================================================\n\
MSG: ece_msgs/Platoon\n\
# ID platoon : 3 bits\n\
uint8 id_platoon\n\
\n\
# ID autres véhicules platoon\n\
IDs[] ids \n\
\n\
# Nombre de véhicules : 3 bits\n\
uint8 nombre_vehicules\n\
\n\
# Destination : 8 octets\n\
ReferencePosition destination\n\
\n\
# Vitesse et interdistance\n\
VitesseInterdistance vitesse_interdistance\n\
================================================================================\n\
MSG: ece_msgs/IDs\n\
uint8 ID\n\
uint8 position\n\
================================================================================\n\
MSG: ece_msgs/VitesseInterdistance\n\
# Vitesse : 6 bits\n\
Speed speed\n\
\n\
# Interdistance : 2 bits\n\
uint8 interdistance\n\
================================================================================\n\
MSG: ece_msgs/Speed\n\
uint16 value # 0.01 m/s\n\
uint8 confidence # 0.01 m/s\n\
\n\
uint16 VALUE_STANDSTILL = 0\n\
uint16 VALUE_ONE_CENTIMETER_PER_SECOND = 1\n\
uint16 VALUE_UNAVAILABLE = 16383\n\
\n\
uint8 CONFIDENCE_OUT_OF_RANGE = 126\n\
uint8 CONFIDENCE_UNAVAILABLE = 127\n\
\n\
================================================================================\n\
MSG: ece_msgs/Desinsertion\n\
# Demande de sortie : 1 octet\n\
bool demande_sortie\n\
\n\
# Vitesse de sortie : 6 bits \n\
Speed speed\n\
\n\
# Point de sortie : 8 octets\n\
ReferencePosition point_sortie\n\
\n\
# Nouvelle position dans P : 2 bits\n\
uint8 position\n\
\n\
# Confirmation insertion\n\
bool confirmation_sortie\n\
\n\
================================================================================\n\
MSG: ece_msgs/FreinageUrgence\n\
# Position P : 2 bits\n\
uint8 position\n\
================================================================================\n\
MSG: ece_msgs/Feu\n\
# Permission de passer le feu : 1 octet\n\
bool permission_feu\n\
";
  }

  static const char* value(const ::ece_msgs::ecemsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ece_msgs::ecemsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.its_header);
      stream.next(m.generation_delta_time);
      stream.next(m.basic_container);
      stream.next(m.init);
      stream.next(m.insertion);
      stream.next(m.desinsertion);
      stream.next(m.freinage_urgence);
      stream.next(m.feu);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ecemsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ece_msgs::ecemsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ece_msgs::ecemsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "its_header: ";
    s << std::endl;
    Printer< ::ece_msgs::ItsPduHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.its_header);
    s << indent << "generation_delta_time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.generation_delta_time);
    s << indent << "basic_container: ";
    s << std::endl;
    Printer< ::ece_msgs::BasicContainer_<ContainerAllocator> >::stream(s, indent + "  ", v.basic_container);
    s << indent << "init: ";
    s << std::endl;
    Printer< ::ece_msgs::Init_<ContainerAllocator> >::stream(s, indent + "  ", v.init);
    s << indent << "insertion: ";
    s << std::endl;
    Printer< ::ece_msgs::Insertion_<ContainerAllocator> >::stream(s, indent + "  ", v.insertion);
    s << indent << "desinsertion: ";
    s << std::endl;
    Printer< ::ece_msgs::Desinsertion_<ContainerAllocator> >::stream(s, indent + "  ", v.desinsertion);
    s << indent << "freinage_urgence: ";
    s << std::endl;
    Printer< ::ece_msgs::FreinageUrgence_<ContainerAllocator> >::stream(s, indent + "  ", v.freinage_urgence);
    s << indent << "feu: ";
    s << std::endl;
    Printer< ::ece_msgs::Feu_<ContainerAllocator> >::stream(s, indent + "  ", v.feu);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ECE_MSGS_MESSAGE_ECEMSG_H
