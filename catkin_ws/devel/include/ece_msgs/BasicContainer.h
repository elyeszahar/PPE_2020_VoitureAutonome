// Generated by gencpp from file ece_msgs/BasicContainer.msg
// DO NOT EDIT!


#ifndef ECE_MSGS_MESSAGE_BASICCONTAINER_H
#define ECE_MSGS_MESSAGE_BASICCONTAINER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ece_msgs/Phase.h>
#include <ece_msgs/StationType.h>

namespace ece_msgs
{
template <class ContainerAllocator>
struct BasicContainer_
{
  typedef BasicContainer_<ContainerAllocator> Type;

  BasicContainer_()
    : ID_exp(0)
    , ID_dest(0)
    , phase()
    , station_type()  {
    }
  BasicContainer_(const ContainerAllocator& _alloc)
    : ID_exp(0)
    , ID_dest(0)
    , phase(_alloc)
    , station_type(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _ID_exp_type;
  _ID_exp_type ID_exp;

   typedef uint8_t _ID_dest_type;
  _ID_dest_type ID_dest;

   typedef  ::ece_msgs::Phase_<ContainerAllocator>  _phase_type;
  _phase_type phase;

   typedef  ::ece_msgs::StationType_<ContainerAllocator>  _station_type_type;
  _station_type_type station_type;





  typedef boost::shared_ptr< ::ece_msgs::BasicContainer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ece_msgs::BasicContainer_<ContainerAllocator> const> ConstPtr;

}; // struct BasicContainer_

typedef ::ece_msgs::BasicContainer_<std::allocator<void> > BasicContainer;

typedef boost::shared_ptr< ::ece_msgs::BasicContainer > BasicContainerPtr;
typedef boost::shared_ptr< ::ece_msgs::BasicContainer const> BasicContainerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ece_msgs::BasicContainer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ece_msgs::BasicContainer_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ece_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ece_msgs': ['/home/ppe2021/catkin_ws/src/ece_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ece_msgs::BasicContainer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ece_msgs::BasicContainer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ece_msgs::BasicContainer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ece_msgs::BasicContainer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ece_msgs::BasicContainer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ece_msgs::BasicContainer_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ece_msgs::BasicContainer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b89e5ecc81a0e7b1d5b7bf77ae93b6d4";
  }

  static const char* value(const ::ece_msgs::BasicContainer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb89e5ecc81a0e7b1ULL;
  static const uint64_t static_value2 = 0xd5b7bf77ae93b6d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ece_msgs::BasicContainer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ece_msgs/BasicContainer";
  }

  static const char* value(const ::ece_msgs::BasicContainer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ece_msgs::BasicContainer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ID expediteur\n\
uint8 ID_exp\n\
\n\
# ID destinataire\n\
uint8 ID_dest\n\
\n\
# Phase de plattoning\n\
Phase phase\n\
\n\
# Type de station\n\
StationType station_type\n\
================================================================================\n\
MSG: ece_msgs/Phase\n\
# Phase de plattoning\n\
uint8 value\n\
\n\
uint8 INIT = 0\n\
uint8 INSERTION = 1\n\
uint8 DESINSERTION = 2\n\
uint8 FEU = 3\n\
uint8 FREINAGE_URG = 4\n\
================================================================================\n\
MSG: ece_msgs/StationType\n\
uint8 value\n\
\n\
uint8 UNKNOWN = 0\n\
uint8 PEDESTRIAN = 1\n\
uint8 CYCLIST = 2\n\
uint8 MOPED = 3\n\
uint8 MOTORCYCLE = 4\n\
uint8 PASSENGER_CAR = 5\n\
uint8 BUS = 6\n\
uint8 LIGHT_TRUCK = 7\n\
uint8 HEAVY_TRUCK = 8\n\
uint8 TRAILER = 9\n\
uint8 SPECIAL_VEHICLE = 10\n\
uint8 TRAM = 11\n\
uint8 ROAD_SIDE_UNIT = 15\n\
";
  }

  static const char* value(const ::ece_msgs::BasicContainer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ece_msgs::BasicContainer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID_exp);
      stream.next(m.ID_dest);
      stream.next(m.phase);
      stream.next(m.station_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BasicContainer_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ece_msgs::BasicContainer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ece_msgs::BasicContainer_<ContainerAllocator>& v)
  {
    s << indent << "ID_exp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ID_exp);
    s << indent << "ID_dest: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ID_dest);
    s << indent << "phase: ";
    s << std::endl;
    Printer< ::ece_msgs::Phase_<ContainerAllocator> >::stream(s, indent + "  ", v.phase);
    s << indent << "station_type: ";
    s << std::endl;
    Printer< ::ece_msgs::StationType_<ContainerAllocator> >::stream(s, indent + "  ", v.station_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ECE_MSGS_MESSAGE_BASICCONTAINER_H
